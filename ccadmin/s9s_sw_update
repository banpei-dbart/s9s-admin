#!/bin/bash
# Copyright 2012 Severalnines AB
#
# MODIFY THE BELOW TO SUIT YOU ENV:


if [ ! -e /etc/cmon.cnf ] ; then
    echo "Could not find /etc/cmon.cnf"
    exit 1
else
    source /etc/cmon.cnf
fi
CID=$cluster_id
CLUSTER_TYPE=$type
CMON_USER=cmon
CMON_PASSWORD=$mysql_password
CMON_DB_HOST=$mysql_hostname
CMON_DB_DB=cmon
MYSQL_BIN=$mysql_bindir/mysql
BACKUP_LOGFILE=/tmp/s9s_backup.log
LOCKFILE="/tmp/s9s_backup.lock"
jobid=0
### NO MODS BELOW UNLESS YOU KNOW WHAT YOU DO:

OSUSER=$USER
if [ "$OSUSER" != "root" ]; then
    echo "must be executed as 'root' or with 'sudo'"
    exit 1
fi



if ! test -f $MYSQL_BIN; then
    echo "Could not find mysql client binary"
    exit 1
fi

WWWROOT=`$MYSQL_BIN -N -B -A --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT -e "select value from cmon_configuration where param='WWWROOT' AND cid=$CID"`

function log_job_message
{    
    MSG=$1
    EXIT_CODE=$2
    QUERY="INSERT INTO cmon_job_message(cid, jobid,message,exit_code,report_ts) VALUES($CID,$jobid,'$MSG',$EXIT_CODE,now())"
    if [ $jobid -ne 0 ]; then 
	$MYSQL_BIN  -B -N  --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT  -e "$QUERY" 2>&1 >/tmp/err.log
    else
	echo "$MSG"
    fi
}

function log_job
{    
    STATUS=$1
    STATUS_TXT=$2
    EXIT_CODE=$3
    QUERY="UPDATE cmon_job SET status='$STATUS', status_txt='$STATUS_TXT', exit_code=$EXIT_CODE, report_ts=NOW()  WHERE cid=$CID AND jobid=$jobid"
    if [ $jobid -ne 0 ]; then 
	$MYSQL_BIN  -B -N  --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT  -e "$QUERY" 2>&1 >/tmp/err.log
    else
	echo "$MSG"
    fi
}

function write_logfile
{
   cat $BACKUP_LOGFILE | sed  -e "s/'/\\\'/g" -e 's/"/\\"/g' > /tmp/s9s_backup_log_escaped
   LOG_CONTENT=`cat /tmp/s9s_backup_log_escaped`
   SIZE=`stat --printf='%s' /tmp/s9s_backup_log_escaped`
   HNAME=`$MYSQL_BIN -N -B -A --user=$CMON_USER --password=$CMON_PASSWORD  --host=127.0.0.1 --port=$CMON_DB_PORT -e "SHOW GLOBAL VARIABLES LIKE 'hostname'" | awk '{print $2;}'`
   QUERY="REPLACE INTO cmon_host_log(cid, hostname, filename, result_len, result, report_ts,description, tag) VALUES ($CID,'$HNAME', '$BACKUP_LOGFILE', $SIZE, \"$LOG_CONTENT\", NOW(), 's9s_backup log', 's9s_backup')"
   $MYSQL_BIN  -B -N  --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT  -e "$QUERY" 2>&1 >/tmp/err.log
   rm -rf /tmp/s9s_backup_log_escaped
}



function remote_cmd_getreply()
{
   desthost=$1
   xcommand=$2
   x=`ssh -q $SSH_OPTS $SSH_USER@$desthost "$SUDO $xcommand 2>/dev/null"`
   x=`echo $x | grep -v "password"`
   echo $x
}

function remote_copy()
{
   srcfile=$1
   desthost=$2
   destfile=$3
   printf "%-4s: Copying '%s' " "$desthost" "$srcfile"
   scp $SSH_OPTS2 $srcfile $SSH_USER@$desthost:$destfile >> $HOME/s9s_deploy.log  2>/dev/null
   if [ $? -eq 0 ]; then
      printf "\033[32m[ok]\033[0m\n"
      return 0
   else
      log_job_message "copying file $srcfile --> $desthost:$destfile" 1
      log_job 'FAILED' 'job failed' 1
      log_job_message "scp $SSH_OPTS2 $srcfile $os_user@$desthost:$destfile" 1
      printf "\033[31m[failed]\033[0m\n"
      exit 1
   fi
}

function remote_cmdx()
{
   desthost=$1
   xcommand=$2
   printf "%-4s: Executing '%s'" "$desthost" "$xcommand"
   ssh -q $SSH_OPTS $SSH_USER@$desthost "$SUDO $xcommand "
   if [ $? -eq 0 ]; then
      printf "\033[32m[ok]\033[0m\n"
      return 0
   else
      log_job_message "command failed: $xcommand" 1
      log_job 'FAILED' 'backup failed' 1
      printf "\033[31m[failed]\033[0m\n"
      exit 1
   fi
}

function remote_cmd_nofail()
{
   desthost=$1
   xcommand=$2
   printf "%-4s: Executing '%s'" "$desthost" "$xcommand"
   ssh -q $SSH_OPTS $SSH_USER@$desthost "$SUDO $xcommand "  >> $HOME/s9s_deploy.log 2>&1
   ret=$?
   printf "\033[32m[ok]\033[0m\n"
   return $ret
}

function remote_cmd()
{
   desthost=$1
   xcommand=$2
   MAX_RETRIES=1
   printf "%-4s: Executing '%s' " "$desthost" "$xcommand"
   retry=0
   while [ $retry -lt $MAX_RETRIES ]; 
   do
      x=`ssh -q $SSH_OPTS $SSH_USER@$desthost "$SUDO $xcommand " 2>&1  >> $HOME/s9s_deploy.log`
      if [ $? -eq 0 ]; then
        printf "\033[32m[ok]\033[0m\n"
        return 0
      fi
      retry=`expr $retry + 1`
      printf "\033[31m[failed: retrying ${retry}/${MAX_RETRIES}]\033[0m\n"
      ssh -q $SSH_OPTS $SSH_USER@$desthost " sync " 2>&1  >> $HOME/s9s_deploy.log
      sleep 1
   done
   
   printf "\033[31m[failed]\033[0m\n"
   echo $x
   echo 'The following command failed:'
   echo "ssh -q $SSH_OPTS $SSH_USER@$desthost \"$SUDO $xcommand \""
   echo 'Try running the command on the line above again, contact http://support.severalnines.com/ticket/new, attach the output from deploy.sh and the error from running the command to the Support issue.'
   exit 1
}


function remote_cmd3()
{
   desthost=$1
   xcommand=$2
   printf "%-4s: Executing '%s' " "$desthost" "$xcommand"
   ssh $SSH_OPTS $SSH_USER@$desthost "$SUDO $xcommand "   
   if [ $? -eq 0 ]; then
      printf "\033[32m[ok]\033[0m\n"
      return 0
   else
      printf "\033[31m[failed]\033[0m\n"
      exit 1
   fi
}

function update_cmon_pkg
{   
    args=`getopt p:s:P:h:i:N:n:f: $*`
    set -- $args
    for i
    do
        case "$i" in
            -p)
                CMON_PASSWORD="$2"; shift;
                shift;;
            -i)
                CID="$2"; shift;
                shift;;
            -f)
                CMON_FILENAME="$2"; shift;
                shift;;
            --)
                shift; break;;
                esac
    done

    if [ -z "$CMON_FILENAME" ]; then
	echo "cmon pkg was not specified. Usage example (for RPM, DO NOT ADD THE CONTROLLER RPM to the package):"
	echo "s9s_sw_update --update-cmon-pkg -f cmon-1.1.36-64bit-glibc23-mc70.tar.gz"
	echo "s9s_sw_update --update-cmon-pkg -f cmon-agent-1.1.36-1.x86_64.rpm"
	exit 1
    fi

    if [ -z "$CID" ]; then
	echo "s9s_sw_update --update-cmon-pkg -i <clusterid>"
	exit 1
    fi
    if [ ! -s $CMON_FILENAME ]; then
	echo "$CMON_FILENAME does not exists or is zero bytes"
	exit 1
    fi
    sum=`md5sum $CMON_FILENAME | awk '{print $1;}'`
    filesize=`stat --printf='%s' $CMON_FILENAME`
    fname=`basename $CMON_FILENAME`

    echo "Do you want to add $CMON_FILENAME to CMON_DEFAULT install package (press y or Y to continue)?"
    read x
    if [ "$x" == "y" ] || [ "$x" == "Y" ]; then	
	echo "Updating software package"
	cp -rf $CMON_FILENAME  $WWWROOT/cmon/upload/
	if [ $? -ne 0 ]; then 
	    echo "FAILED: cp -rf $CMON_FILENAME  $WWWROOT/cmon/upload/"
	    exit 1
	fi
	QUERY="BEGIN; DELETE FROM cmon_uploads WHERE cid=$CID AND packageid=(SELECT packageid FROM cmon.cmon_sw_package WHERE name='CMON_DEFAULT' AND cid=$CID);\
                INSERT IGNORE INTO cmon.cmon_uploads ( cid, packageid, filename,path,cluster_type,version_tag,md5sum,filesize,selected) VALUES (1,1,'$fname','${WWWROOT}/cmon/upload/','$CLUSTER_TYPE','','$sum', $filesize ,1); COMMIT"    
	$MYSQL_BIN  -B -N  --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT  -e "$QUERY" 2>&1 >/tmp/err.log    
	if [ $? -ne 0 ]; then 
	    echo "FAILED: $QUERY"
	    echo "Nothing was changed"
	    exit 1
	fi
	echo "Completed updating software package."
    else
	echo "Aborting upgrade of software package"
    fi    
}

function update_mysql_pkg
{   
    args=`getopt p:s:P:h:i:N:n:f: $*`
    set -- $args
    for i
    do
        case "$i" in
            -p)
                CMON_PASSWORD="$2"; shift;
                shift;;
            -i)
                CID="$2"; shift;
                shift;;
            -f)
                COMMASEP_FILELIST="$2"; shift;
                shift;;
            -n)
                PKG_NAME="$2"; shift;
                shift;;
            --)
                shift; break;;
                esac
    done


    if [ -z "$COMMASEP_FILELIST" ]; then
	echo "A comma-separated list of files was not specified. Usage example:"
	echo '  s9s_sw_update --update-mysql-pkg -i <clusterid> -f mysql-5.5.28_wsrep_23.7-linux-x86_64.tar.gz,galera-23.2.2-amd64.deb -n <package_name>'
	echo 'or'
	echo '  s9s_sw_update --update-mysql-pkg -i <clusterid> -f MySQL-server-5.5.28_wsrep_23.7-1.rhel5.x86_64.rpm,galera-23.2.2-1.rhel5.x86_64.rpm -n <package_name>'
	exit 1
    fi

    CMON_DB='cmon'
    if [ -z "$PKG_NAME" ]; then
	PKG_NAME="MYSQL_INITIAL_DEPLOY"
    fi
    FILELIST=""
    
    FILELIST=`echo $COMMASEP_FILELIST | awk '{gsub(","," ");print}'`
    rpm=0
    for f in $FILELIST 
    do
	if [ ! -s $f ]; then
	    echo "$f does not exists or is zero bytes"
	    exit 1
	else
	    ext=${f##*.}
	    if [ "$ext" = "rpm" ]; then
		rpm=1
	    fi
	fi
    done

    echo "Do you want to add $FILELIST to $PKG_NAME install package (press y or Y to continue)?"
    read x
    if [ "$x" == "y" ] || [ "$x" == "Y" ]; then	
	echo "Updating software package"
	QUERY="SELECT packageid FROM ${CMON_DB}.cmon_sw_package WHERE name='$PKG_NAME' AND cid=$CID"
	PID=`$MYSQL_BIN  -B -N  --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT  -e "$QUERY"`	
	if [ -z "$PID" ]; then
	    echo "Creating package $PKG_NAME"
	    QUERY="INSERT INTO ${CMON_DB}.cmon_sw_package(cid,name,rpm) VALUES($CID, '$PKG_NAME', $rpm)"
	    $MYSQL_BIN  -B -N  --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT  -e "$QUERY"
	fi
	QUERY="SELECT packageid FROM ${CMON_DB}.cmon_sw_package WHERE name='$PKG_NAME' AND cid=$CID"
	PID=`$MYSQL_BIN  -B -N  --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT  -e "$QUERY"`
	if [ -z "$PID" ]; then
	    echo "Creating package failed"
	    exit 1	    
	fi
	QUERY="BEGIN; DELETE FROM cmon_uploads WHERE cid=$CID AND packageid=(SELECT packageid FROM ${CMON_DB}.cmon_sw_package WHERE name='$PKG_NAME' AND cid=$CID); UPDATE ${CMON_DB}.cmon_sw_package SET selected=0 WHERE cid=$CID and name<>'CMON_DEFAULT'; UPDATE ${CMON_DB}.cmon_sw_package SET selected=1 WHERE cid=$CID AND packageid=$PID"
	for f in $FILELIST 
	do
	    sum=`md5sum $f | awk '{print $1;}'`
	    filesize=`stat --printf='%s' $f`
	    fname=`basename $f`
	    cp -rf $f  $WWWROOT/cmon/upload/
	    if [ $? -ne 0 ]; then 
		echo "FAILED: cp -rf $f  $WWWROOT/cmon/upload/"
		exit 1
	    fi
	    QUERY="$QUERY; INSERT IGNORE INTO ${CMON_DB}.cmon_uploads ( cid, packageid, filename,path,cluster_type,version_tag,md5sum,filesize,selected) VALUES ($CID,$PID,'$fname','${WWWROOT}/cmon/upload/','$CLUSTER_TYPE','','$sum', $filesize ,1)"
	done
	QUERY="$QUERY;COMMIT"
	$MYSQL_BIN  -B -N  --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT  -e "$QUERY" 2>&1 >/tmp/err.log    
	if [ $? -ne 0 ]; then 
	    echo "FAILED: $QUERY"
	    echo "Nothing was changed"
	    exit 1
	fi	
	echo "Completed updating software package."
    else
	echo "Aborting upgrade of software package"
    fi    
}


function install_mysql_pkg
{   
    args=`getopt p:s:P:h:i:N:n:f: $*`
    set -- $args
    for i
    do
        case "$i" in
            -p)
                CMON_PASSWORD="$2"; shift;
                shift;;
            -i)
                CID="$2"; shift;
                shift;;
            -h)
		XHOSTNAME="$2"; shift;
                shift;;
            -n)
                PKG_NAME="$2"; shift;
                shift;;
            --)
                shift; break;;
                esac
    done


    if [ -z "$XHOSTNAME" ]; then
	echo 'Syntax:'
	echo ' s9s_sw_update --install-mysql -i <clusterid> -n <package_name> -h <hostname>'
	exit 1
    fi
    if [ -z "$CID" ]; then
	echo 'Syntax:'
	echo ' s9s_sw_update --install-mysql -i <clusterid> -n <package_name> -h <hostname>'
	exit 1
    fi
    load_opts $CID
    CMON_DB='cmon'
    echo "Do you want install $PKG_NAME on '$XHOSTNAME' (press y or Y to continue)?"
    read x
    if [ "$x" == "y" ] || [ "$x" == "Y" ]; then	
	QUERY="SELECT packageid FROM ${CMON_DB}.cmon_sw_package WHERE name='$PKG_NAME' AND cid=$CID"
	PID=`$MYSQL_BIN  -B -N  --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT  -e "$QUERY"`	
	if [ -z "$PID" ]; then
	    echo "Invalid $PKG_NAME"
	    exit 1
	fi
	QUERY="SELECT group_concat(concat(path,',', filename) SEPARATOR ' ') FROM ${CMON_DB}.cmon_uploads WHERE packageid='$PID' AND cid=$CID"
	FILELIST=`$MYSQL_BIN  -B -N  --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT  -e "$QUERY"`
	
	if [ -z "$FILELIST" ]; then
	    echo "No files in package $PKG_NAME"
	    exit 1	    
	fi

	if [ "$FILELIST" = "NULL" ]; then
	    echo "No files in package $PKG_NAME"
	    exit 1	    
	fi

	remote_cmd $XHOSTNAME "mkdir -p $STAGING_DIR"
	
	for f in $FILELIST 
	do
	    path=`echo $f | awk -F, '{print $1;}'`
	    filename=`echo $f | awk -F, '{print $2;}'`	    
	    remote_copy $path/$filename $XHOSTNAME $STAGING_DIR	    	    
	done
	RPMLIST=""
	for f in $FILELIST 
	do
	    filename=`echo $f | awk -F, '{print $2;}'`	    
	    ext=${filename##*.}
	    case $ext in
		gz)
		    MYSQL_BASEDIR2=${MYSQL_BASEDIR%/}
		    remote_cmd_nofail $XHOSTNAME "rm -f ${MYSQL_BASEDIR2}*"
		    remote_cmd $XHOSTNAME "tar xvfz ${STAGING_DIR}/$filename -C `dirname $MYSQL_BASEDIR`"
		    remote_cmd $XHOSTNAME "ln -s `dirname $MYSQL_BASEDIR`/`basename $filename .tar.gz`  $MYSQL_BASEDIR2"
		    ;;
		rpm)
		    RPMLIST="$RPMLIST $STAGING_DIR/$filename"
		    ;;
		deb)
		    DEBLIST="$DEBLIST $STAGING_DIR/$filename"
		    ;;
	    esac	    
	done
	if [ -n "$RPMLIST" ]; then
	    remote_cmd $XHOSTNAME "rpm -Uvh $RPMLIST"
	fi
	if [ -n "$DEBLIST" ]; then
	    remote_cmd $XHOSTNAME "/usr/bin/dpkg -i $DEBLIST"
	fi
	echo "Installed $PKG_NAME on $XHOSTNAME"		    
    fi
}




function install_mysql
{
    args=`getopt p:i:P:t:d:j:h:f:V: $*`
    set -- $args
    for i
    do
	case "$i" in
            -p)
		CMON_PASSWORD="$2"; shift;
		shift;;
            -i)
		CLUSTER_ID="$2"; shift;
		shift;;
            -h)
		XHOSTNAME="$2"; shift;
		shift;;
            -P)
		PKG_NAME="$2"; shift;
		shift;;
            -j)
		jobid="$2"; shift;
		shift;;
            --)
		shift; break;;
	esac
    done    
    

    if [ -z "$CMON_PASSWORD" ]; then
      exit 1
    fi

    if [ -z "$CLUSTER_ID" ]; then
      exit 1
    fi

    if [ -z "$XHOSTNAME" ]; then
      exit 1
    fi

    
    case $CLUSTER_TYPE in
	galera)
	    ;;
	*)
	    ;;
    esac
    load_opts $CLUSTER_ID
    if [ -z "$VENDOR" ]; then
	VENDOR=$XVENDOR
    fi

    if [ -z "$VENDOR" ]; then
	VENDOR="internal_pkg"
    fi

    mkdir -p $S9S_TMPDIR
    chown $SSH_USER:$SSH_USER $S9S_TMPDIR
    remote_cmd_nofail $XHOSTNAME "mkdir -p $S9S_TMPDIR"

    if [ "$OS" = "redhat" ]; then
	remote_cmd_nofail $XHOSTNAME "yum -y remove MySQL* mysql* Percona* percona* MariaDB* mariadb* MySQL-Cluster* MySQL-cluster* mysql-cluster* galera*"	
    else
	remote_cmd_nofail $XHOSTNAME "apt-get -y remove MySQL* mysql* Percona* percona* MariaDB* mariadb* MySQL-Cluster* MySQL-cluster* mysql-cluster* galera*"	
    fi

    QUERY="GRANT INSERT,UPDATE,DELETE, SELECT ON $CMON_DB_DB.* TO 'cmon'@'$XHOSTNAME' IDENTIFIED BY '$CMON_PASSWORD'"    
    $MYSQL_BIN  -B -N  --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT  -e "$QUERY" 2>&1 >/tmp/err.log    
    if [ $? -ne 0 ]; then 
	echo "FAILED: $QUERY"
	echo ""
	exit 1
    fi	
    QUERY="GRANT SUPER ON *.* TO 'cmon'@'$XHOSTNAME' IDENTIFIED BY '$CMON_PASSWORD'"    
    $MYSQL_BIN  -B -N  --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT  -e "$QUERY" 2>&1 >/tmp/err.log    
    if [ $? -ne 0 ]; then 
	echo "FAILED: $QUERY"
	echo ""
	exit 1
    fi	

    case $VENDOR in
	percona)
	    if [ "$OS" = "redhat" ]; then
		remote_cmd $XHOSTNAME "rpm -Uhv --force http://www.percona.com/downloads/percona-release/percona-release-0.0-1.x86_64.rpm"
		remote_cmd $XHOSTNAME "yum -y install Percona-XtraDB-Cluster-galera"
	    else
		remote_cmd $XHOSTNAME "apt-get update"
		remote_cmd_nofail $XHOSTNAME "apt-get -y install  libssl0.9.8  wget rsync psmisc"
		remote_cmd_nofail $XHOSTNAME "sed -i.bak '/repo.percona.com/d'  /etc/apt/sources.list"
		wget --no-check-certificate --tries=5  -O ${S9S_TMPDIR}/RPM-GPG-KEY-percona http://www.percona.com/redir/downloads/RPM-GPG-KEY-percona
		if [ $? -ne 0 ]; then
		    log_job_message "Failed: wget --no-check-certificate --tries=5  -O ${S9S_TMPDIR}/RPM-GPG-KEY-percona http://www.percona.com/redir/downloads/RPM-GPG-KEY-percona" 1
		    log_job 'FAILED' 'install garbd failed' 1
		    exit 1
		fi
		remote_copy $S9S_TMPDIR/RPM-GPG-KEY-percona ${XHOSTNAME} ${S9S_TMPDIR}/RPM-GPG-KEY-percona
		remote_cmd $XHOSTNAME "gpg --import ${S9S_TMPDIR}/RPM-GPG-KEY-percona"
		remote_cmd $XHOSTNAME "/bin/sh -c 'gpg -a --export CD2EFD2A | apt-key add -'"
		remote_cmd $XHOSTNAME "/bin/sh -c 'echo \"deb http://repo.percona.com/apt `lsb_release -c -s` main\" >> /etc/apt/sources.list'"
		remote_cmd $XHOSTNAME "/bin/sh -c 'echo \"deb-src http://repo.percona.com/apt `lsb_release -c -s` main\" >> /etc/apt/sources.list'"
		remote_cmd $XHOSTNAME "apt-get -q -y update"
		remote_cmd $XHOSTNAME "LC_ALL=en_US.utf8 DEBIAN_FRONTEND=noninteractive apt-get -o Dpkg::Options::='--force-confnew' -y -q install  percona-xtradb-cluster-galera-2.x"
		remote_cmd $XHOSTNAME "sync"
	    fi
	    ;;
	internal_pkg)	    
	    QUERY="SELECT packageid FROM ${CMON_DB}.cmon_sw_package WHERE name='$PKG_NAME' AND cid=$CID"
	    PID=`$MYSQL_BIN  -B -N  --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT  -e "$QUERY"`	
	    if [ -z "$PID" ]; then
		echo "Invalid $PKG_NAME"
		exit 1
	    fi
	    QUERY="SELECT group_concat(concat(path,',', filename) SEPARATOR ' ') FROM ${CMON_DB}.cmon_uploads WHERE packageid='$PID' AND cid=$CID"
	    FILELIST=`$MYSQL_BIN  -B -N  --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT  -e "$QUERY"`
	
	    if [ -z "$FILELIST" ]; then
		echo "No files in package $PKG_NAME"
		exit 1	    
	    fi
	    
	    if [ "$FILELIST" = "NULL" ]; then
		echo "No files in package $PKG_NAME"
		exit 1	    
	    fi
	    
	    
	    remote_cmd $XHOSTNAME "mkdir -p $STAGING_DIR"
	    
	    for f in $FILELIST 
	    do
		path=`echo $f | awk -F, '{print $1;}'`
		filename=`echo $f | awk -F, '{print $2;}'`	    
		remote_copy $path/$filename $XHOSTNAME $STAGING_DIR	    	    
	    done
	    RPMLIST=""
	    for f in $FILELIST 
	    do
		filename=`echo $f | awk -F, '{print $2;}'`	    
		ext=${filename##*.}
		case $ext in
		    gz)
			MYSQL_BASEDIR2=${MYSQL_BASEDIR%/}
			remote_cmd_nofail $XHOSTNAME "rm -f ${MYSQL_BASEDIR2}*"
			remote_cmd $XHOSTNAME "tar xvfz ${STAGING_DIR}/$filename -C `dirname $MYSQL_BASEDIR`"
			remote_cmd $XHOSTNAME "ln -s `dirname $MYSQL_BASEDIR`/`basename $filename .tar.gz`  $MYSQL_BASEDIR2"
			;;
		    rpm)
			RPMLIST="$RPMLIST $STAGING_DIR/$filename"
			;;
		    deb)
			DEBLIST="$DEBLIST $STAGING_DIR/$filename"
			;;
		esac	    
	    done
	    if [ -n "$RPMLIST" ]; then
		remote_cmd $XHOSTNAME "rpm -Uvh $RPMLIST"
	    fi
	    if [ -n "$DEBLIST" ]; then
		remote_cmd $XHOSTNAME "/usr/bin/dpkg -i $DEBLIST"
	    fi	    
	    ;;
	mariadb)
	    if [ "$OS" = "redhat" ]; then
		cat << 'EOF' > $S9S_TMPDIR/MariaDB.centos5
[mariadb]
name = MariaDB
baseurl = http://yum.mariadb.org/5.5/centos5-amd64
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1                 
EOF
		cat << 'EOF' > $S9S_TMPDIR/MariaDB.centos6
[mariadb]
name = MariaDB
baseurl = http://yum.mariadb.org/5.5/centos6-amd64
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1                 
EOF
		cat << 'EOF' > $S9S_TMPDIR/MariaDB.rhel5
[mariadb]
name = MariaDB
baseurl = http://yum.mariadb.org/5.5/rhel5-amd64
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1                 
EOF
		cat << 'EOF' > $S9S_TMPDIR/MariaDB.rhel6
[mariadb]
name = MariaDB
baseurl = http://yum.mariadb.org/5.5/rhel6-amd64
gpgkey=https://yum.mariadb.org/RPM-GPG-KEY-MariaDB
gpgcheck=1                 
EOF
		RHEL=$(cat /etc/redhat-release | egrep "[0-9]" -o | head -1)
		OS2=$(awk '{print $1}' /etc/redhat-release | tr '[:upper:]' '[:lower:]')
		remote_copy ${S9S_TMPDIR}/MariaDB.${OS2}${RHEL} $XHOSTNAME ${S9S_TMPDIR}/MariaDB.${OS2}${RHEL}.tmp
		remote_cmd $XHOSTNAME "mv -f ${S9S_TMPDIR}/MariaDB.${OS2}${RHEL}.tmp /etc/yum.repos.d/MariaDB.repo"
                remote_cmd $XHOSTNAME "yum -y install galera "
	    else
		echo "debian/ubuntu not supported yet"
	    fi
	    ;;
	*)
	    echo "Not a supported vendor"
	    exit 1;	           	     
    esac


    case $CLUSTER_TYPE in
	galera)
	    remote_cmd $XHOSTNAME "s9s_backup --install -i $CLUSTER_ID -b /tmp/"
	    ;;
	*)
	    ;;
    esac
    
}



function update_mysql_pkg_yum
{   
    args=`getopt p:s:P:h:i:N:n:f: $*`
    set -- $args
    for i
    do
        case "$i" in
            -p)
                CMON_PASSWORD="$2"; shift;
                shift;;
            -i)
                CID="$2"; shift;
                shift;;
            -h)
		XHOSTNAME="$2"; shift;
                shift;;
            --)
                shift; break;;
                esac
    done


    if [ -z "$XHOSTNAME" ]; then
	echo 'Syntax:'
	echo ' s9s_sw_update --update-mysql-yum -i <clusterid> -h <hostname>'
	exit 1
    fi
    if [ -z "$CID" ]; then
	echo 'Syntax:'
	echo ' s9s_sw_update --update-mysql-yum -i <clusterid> -h <hostname>'
	exit 1
    fi
    load_opts $CID
    CMON_DB='cmon'
    echo "Do you want update yum packages on '$XHOSTNAME' (press y or Y to continue)?"
    read x
    if [ "$x" == "y" ] || [ "$x" == "Y" ]; then	
	remote_cmd $XHOSTNAME "yum update `rpm -qa | egrep -i  '(percona|mysql|galera|maria)'`"
	echo "Updated packages on $XHOSTNAME"		    
    fi
    echo "Updated packages on $XHOSTNAME"		    
    exit 0
}



function load_opts 
{
    local CLUSTER_ID=$1
    echo "load opts $CLUSTER_ID"
    OS=`$MYSQL_BIN -N -B -A --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT -e "select value from cmon_configuration where param='OS' AND cid=$CLUSTER_ID" 2>/dev/null`
    CONFIGDIR=`$MYSQL_BIN -N -B -A --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT -e "select value from cmon_configuration where param='CONFIGDIR' AND cid=$CLUSTER_ID" 2>/dev/null`
    MYSQL_PORT=`$MYSQL_BIN -N -B -A --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT -e "select value from cmon_configuration where param='MYSQL_PORT' AND cid=$CLUSTER_ID" 2>/dev/null`
    GALERA_PORT=`$MYSQL_BIN -N -B -A --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT -e "select value from cmon_configuration where param='GALERA_PORT' AND cid=$CLUSTER_ID" 2>/dev/null`
    MYSQL_BASEDIR=`$MYSQL_BIN -N -B -A --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT -e "select value from cmon_configuration where param='MYSQL_BASEDIR' AND cid=$CLUSTER_ID" 2>/dev/null`
    STAGING_DIR=`$MYSQL_BIN -N -B -A --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT -e "select value from cmon_configuration where param='STAGING_DIR' AND cid=$CLUSTER_ID" 2>/dev/null`
    MYSQL_SCRIPTDIR=`$MYSQL_BIN -N -B -A --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT -e "select value from cmon_configuration where param='SCRIPTDIR' AND cid=$CLUSTER_ID" 2>/dev/null`
    SSH_IDENTITY=`$MYSQL_BIN -N -B -A --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT -e "select value from cmon_configuration where param='SSH_IDENTITY' AND cid=$CLUSTER_ID" 2>/dev/null`
    SSH_USER=`$MYSQL_BIN -N -B -A --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT -e "select value from cmon_configuration where param='SSH_USER' AND cid=$CLUSTER_ID" 2>/dev/null`
    SSH_PORT=`$MYSQL_BIN -N -B -A --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT -e "select value from cmon_configuration where param='SSH_PORT' AND cid=$CLUSTER_ID" 2>/dev/null`
    SSH_OPTSX=`$MYSQL_BIN -N -B -A --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT -e "select value from cmon_configuration where param='SSH_OPTS' AND cid=$CLUSTER_ID" 2>/dev/null`
    SUDO=`$MYSQL_BIN -N -B -A --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT -e "select value from cmon_configuration where param='SUDO' AND cid=$CLUSTER_ID" 2>/dev/null`

    OS_USER_HOME=`$MYSQL_BIN -N -B -A --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT -e "select value from cmon_configuration where param='OS_USER_HOME' AND cid=$CLUSTER_ID" 2>/dev/null`
    DATADIR=`$MYSQL_BIN -N -B -A --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT -e "select value from cmon.cluster_config where variable='datadir' and cid=1 order by id asc limit 1" 2>/dev/null`

    
    SSH_OPTS="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -oNumberOfPasswordPrompts=0 -oConnectTimeout=10"
    if [ "$SSH_IDENTITY" = "" ]; then
	SSH_IDENTITY="-oIdentityFile=${OS_USER_HOME}/.ssh/id_rsa"
    else
	SSH_IDENTITY="-oIdentityFile=$SSH_IDENTITY"
    fi

    SSH_OPTS="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -oNumberOfPasswordPrompts=0 -oConnectTimeout=10 $SSH_IDENTITY"
    SSH_OPTS2="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -oNumberOfPasswordPrompts=0 -oConnectTimeout=10 $SSH_IDENTITY"
    if [ "$SSH_USER" != "root" ]; then
	#SSH_OPTS_EXTRA="-ft"
	SSH_OPTS=" -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -oNumberOfPasswordPrompts=0 -oConnectTimeout=10 $SSH_IDENTITY"
	if [ "$SUDO" = "" ] || [ "$SUDO" = "NULL" ];  then
           SUDO="sudo"
        fi
    fi
    if [ "$SSH_PORT" = "" ] || [ "$SSH_PORT" = "NULL" ];  then
        SSH_PORT="22"
    fi

    if [ "$S9S_TMPDIR" = "" ] || [ "$TMPDIR" = "NULL" ];  then
	S9S_TMPDIR="/tmp/"
	TMPDIR="/tmp/"
    fi
    SSH_OPTS="$SSH_OPTSX -p$SSH_PORT $SSH_OPTS"    
    SSH_OPTS2="-P$SSH_PORT $SSH_OPTS2"    

}


ARG=$1
shift
case $ARG in
    --update-cmon-pkg)
	update_cmon_pkg $*
    ;;
    --update-mysql-pkg)
	update_mysql_pkg $*
	;;
    --install-mysql)
        install_mysql $*
	;;
    --update-mysql-yum)
        update_mysql_pkg_yum $*
	;;
    --list)
	list_pkgs
    ;;
    *)
	echo "Usage:"
	echo "bash ./s9s_sw_updater <--update-cmon-pkg|--update-mysql-pkg|--install-mysql> more options will follow"
	exit 1
	;;
esac
