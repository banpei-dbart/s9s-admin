#!/bin/bash

# All files in this package is subject to the GPL v2 license
# More information is in the COPYING file in the top directory of this package.
# Copyright (C) 2011 Severalnines

# Also see CREDITS, many thanks to Timothy Der (randomorzero.wordpress.com)
# for the work on the makecfg, mysqlckk, and haproxy.cfg.tmpl


if [ ! -e /etc/cmon.cnf ] ; then
    echo "Could not find /etc/cmon.cnf"
    exit 1
else
    source /etc/cmon.cnf
fi


CMON_DB_HOST=127.0.0.1
CMON_DB_PORT=$mysql_port
CMON_USER=cmon
CMON_DB_DB=cmon
CMON_PASSWORD=$mysql_password
MYSQL_BIN=$mysql_basedir/bin/mysql
MYSQL_BIN2=$mysql_bindir/mysql
CONNECT_TIMEOUT=10
CLUSTER_TYPE=$type
MYSQL_OPTS="--connect-timeout=$CONNECT_TIMEOUT"
LOCKFILE="/tmp/s9s_create.lock"
OSUSER=$USER
SUFFIX="1"
PREFIX="s9s"
JOBID=0
HAPROXY_MYSQL_LISTEN_PORT="33306"
HAPROXY_OPTS="-f /etc/haproxy/haproxy.cfg -p /var/run/haproxy.pid -st \$(cat /var/run/haproxy.pid)"
LB_ADMIN_USER='admin'
LB_ADMIN_PORT="9600"
LB_ADMIN_PASSWORD='admin'

if [ "$OSUSER" != "root" ]; then
    echo "must be executed as 'root' or with 'sudo'"
    exit 1
fi
 
TMPDIR=/Users/johan/tmp

function log_job_message
{    
    MSG=$1
    EXIT_CODE=$2
    if [ -z "$EXIT_CODE" ]; then
	EXIT_CODE=1
    fi
    QUERY="INSERT INTO cmon_job_message(cid, jobid,message,exit_code,report_ts) VALUES($CLUSTER_ID,$JOBID,\"$MSG\",$EXIT_CODE,now())"
    if [ $JOBID -ne 0 ]; then 
	$MYSQL_BIN  -B -N  --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT  -e "$QUERY" 2>&1 >/tmp/err.log
    else
	if [ $EXIT_CODE -ne 0 ]; then
	    echo ""
	    echo "Failed: $MSG"
	fi
    fi
}

function log_job
{    
    STATUS=$1
    STATUS_TXT=$2
    EXIT_CODE=$3
    QUERY="UPDATE cmon_job SET status='$STATUS', status_txt='$STATUS_TXT', exit_code=$EXIT_CODE, report_ts=NOW()  WHERE cid=$CLUSTER_ID AND jobid=$JOBID"
    if [ $JOBID -ne 0 ]; then 
	$MYSQL_BIN  -B -N  --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT  -e "$QUERY" 2>&1 >/tmp/err.log
    fi
}


function remote_copy()
{
   srcfile=$1
   desthost=$2
   destfile=$3
   printf "%-4s: Copying '%s' " "$desthost" "$srcfile"
   scp $SSH_OPTS2 $srcfile $SSH_USER@$desthost:$destfile >> $HOME/s9s_deploy.log  2>/dev/null
   if [ $? -eq 0 ]; then
      log_job_message "copying file $srcfile --> $desthost:$destfile" 0
      printf "\033[32m[ok]\033[0m\n"
      return 0
   else
      log_job_message "copying file $srcfile --> $desthost:$destfile" 1
      log_job 'FAILED' 's9s_haproxy failed' 1
      printf "\033[31m[failed]\033[0m\n"
      exit 1
   fi
}

function remote_cmdx()
{
   desthost=$1
   xcommand=$2
   printf "%-4s: Executing '%s'" "$desthost" "$xcommand"
   ssh -q $SSH_OPTS $SSH_USER@$desthost "$SUDO $xcommand "
   if [ $? -eq 0 ]; then
      log_job_message "$desthost: Executed $xcommand" 0
      printf "\033[32m[ok]\033[0m\n"
      return 0
   else
      log_job_message "command failed: $xcommand" 1
      log_job 'FAILED' 'backup failed' 1
      printf "\033[31m[failed]\033[0m\n"
      exit 1
   fi
}

function remote_cmd_nofail()
{
   desthost=$1
   xcommand=$2
   printf "%-4s: Executing '%s'" "$desthost" "$xcommand"
   ssh -q $SSH_OPTS $SSH_USER@$desthost "$SUDO $xcommand "  >> $HOME/s9s_deploy.log 2>&1
   ret=$?
   log_job_message "$desthost: Executed $xcommand" 0
   printf "\033[32m[ok]\033[0m\n"
   return $ret
}

function remote_cmd()
{
   desthost=$1
   xcommand=$2
   MAX_RETRIES=1
   printf "%-4s: Executing '%s' " "$desthost" "$xcommand"
   retry=0
   while [ $retry -lt $MAX_RETRIES ]; 
   do
      x=`ssh -q $SSH_OPTS $SSH_USER@$desthost "$SUDO $xcommand " 2>&1  >> $HOME/s9s_deploy.log`
      if [ $? -eq 0 ]; then
	  log_job_message "$desthost: Executed $xcommand" 0
          printf "\033[32m[ok]\033[0m\n"
          return 0
      fi
      retry=`expr $retry + 1`
      printf "\033[31m[failed: retrying ${retry}/${MAX_RETRIES}]\033[0m\n"
      ssh -q $SSH_OPTS $SSH_USER@$desthost " sync " 2>&1  >> $HOME/s9s_deploy.log
      sleep 1
   done
   log_job_message "FAILED: ${desthost}@${xcommand}" 1
   printf "\033[31m[failed]\033[0m\n"
   echo $x
   echo 'The following command failed:'
   echo "ssh -q $SSH_OPTS $SSH_USER@$desthost \" $xcommand \""
   echo 'Try running the command on the line above again, contact http://support.severalnines.com/ticket/new, attach the output from deploy.sh and the error from running the command to the Support issue.'
   exit 1
}


function remote_cmd3()
{
   desthost=$1
   xcommand=$2
   printf "%-4s: Executing '%s' " "$desthost" "$xcommand"
   ssh -nq -tt $SSH_OPTS $SSH_USER@$desthost "$SUDO $xcommand "   >> $HOME/s9s_deploy.log 2>&1
   if [ $? -eq 0 ]; then
       log_job_message "$desthost: Executed $xcommand" 0
       printf "\033[32m[ok]\033[0m\n"
       return 0
   else
       printf "\033[31m[failed]\033[0m\n"
       log_job_message "FAILED: ${desthost}@${xcommand}" 1
       exit 1
   fi
}



function load_opts
{
    local CLUSTER_ID=$1
    echo "load opts $CLUSTER_ID"
    OS=`$MYSQL_BIN -N -B -A --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT -e "select value from cmon_configuration where param='OS' AND cid=$CLUSTER_ID"`
    MYSQL_PORT=`$MYSQL_BIN -N -B -A --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT -e "select value from cmon_configuration where param='MYSQL_PORT' AND cid=$CLUSTER_ID"`
    SSH_IDENTITY=`$MYSQL_BIN -N -B -A --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT -e "select value from cmon_configuration where param='SSH_IDENTITY' AND cid=$CLUSTER_ID"`
    SSH_USER=`$MYSQL_BIN -N -B -A --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT -e "select value from cmon_configuration where param='SSH_USER' AND cid=$CLUSTER_ID"`
    TMPDIR=`$MYSQL_BIN -N -B -A --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT -e "select value from cmon_configuration where param='STAGING_DIR' AND cid=$CLUSTER_ID"`
    OS_USER_HOME=`$MYSQL_BIN -N -B -A --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT -e "select value from cmon_configuration where param='OS_USER_HOME' AND cid=$CLUSTER_ID"`
    SUDO=`$MYSQL_BIN -N -B -A --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT -e "select value from cmon_configuration where param='SUDO' AND cid=$CLUSTER_ID"`

    if [ $? -ne 0 ]; then 
        log_job_message "load opts failed"
        exit 1
    fi

    if [ -z "$MYSQL_PORT" ]; then 
        log_job_message "MYSQL_PORT not set in Cluster Settings"
        exit 1
    fi

    if [ -z "$SSH_USER" ]; then 
        log_job_message "SSH_USER not set in Cluster Settings"
        exit 1
    fi

    if [ -z "$TMPDIR" ]; then 
        log_job_message "STAGING_DIR not set in Cluster Settings"
        exit 1
    fi

    if [ -z "$OS" ]; then 
        log_job_message "OS not set in Cluster Settings"
        exit 1
    fi


    SSH_OPTS="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -oNumberOfPasswordPrompts=0 -oConnectTimeout=10"
    if [ "$SSH_IDENTITY" = "" ]; then
	SSH_IDENTITY="-oIdentityFile=${OS_USER_HOME}/.ssh/id_rsa"
    fi
    SSH_OPTS="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -oNumberOfPasswordPrompts=0 -oConnectTimeout=10 $SSH_IDENTITY"
    SSH_OPTS2="-o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -oNumberOfPasswordPrompts=0 -oConnectTimeout=10 $SSH_IDENTITY"
    if [ "$SSH_USER" != "root" ]; then
	SSH_OPTS="-t -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no -oNumberOfPasswordPrompts=0 -oConnectTimeout=10 $SSH_IDENTITY"
	if [ -z "$SUDO" ]; then
            SUDO=sudo
	fi
    fi
    mkdir -p $TMPDIR/haproxy
    TMPDIR=$TMPDIR/haproxy
}

function change_password_mysql
{
    local h=$1
    local user=$2
    local new_password=$3    
    QUERY="UPDATE mysql.user SET password=password('$new_password') WHERE user='$user'; FLUSH PRIVILEGES;"        
    echo "$h: executing: $QUERY"
   `$MYSQL_BIN -B -N --host=$h --port=$MYSQL_PORT --user=cmon --password=$CMON_PASSWORD --database=mysql -e "$QUERY"`
    if [ $? -ne 0 ]; then 
	echo "Failed $QUERY"
	exit 1
    fi
    
}

function change_password_cmoncnf
{
    local h=$1
    local new_password=$2    
    if [ $CLUSTER_ID -eq 1 ]; then
	remote_cmd $h "sed -i 's#mysql_password=.*#mysql_password=$new_password#g' /etc/cmon.cnf"
    else
	remote_cmd $h "sed -i 's#mysql_password=.*#mysql_password=$new_password#g' /etc/cmon.cnf.$CLUSTER_ID"
    fi
}

function change_cmon_password
{
    LB_NODE_LIST=""
    args=`getopt p:s:P:h:i:N:n:j: $*`
    set -- $args
    for i
    do
        case "$i" in
            -p)
                CMON_PASSWORD="$2"; shift;
                shift;;
            -i)
                CLUSTER_ID="$2"; shift;
                shift;;
            -n)
                NEW_PASSWORD="$2"; shift;
                shift;;
            -j)
                JOBID="$2"; shift;
                shift;;
            --)
                shift; break;;
                esac
    done

    
    if [ -z "$CMON_PASSWORD" ]; then
        echo "s9s_change_passwd --cmon  -p <current cmon password> is missing"
      exit 1
    fi

    if [ -z "$CLUSTER_ID" ]; then
        echo "s9s_change_passwd --cmon  -i <cluster id> is missing"
	exit 1
    fi

    if [ -z "$NEW_PASSWORD" ]; then
        echo "s9s_change_passwd --cmon  -n <new_password> is missing"
        exit 1
    fi
    
    
    if ! test -f $MYSQL_BIN; then
	if ! test -f $MYSQL_BIN2; then
	    echo "Could not find mysql client binary"
	    echo "Change MYSQL_BIN in beginning of the scipt"
	    exit 1
	fi
	MYSQL_BIN=$MYSQL_BIN2
    fi


    load_opts $CLUSTER_ID
    QUERY="select group_concat(h.hostname SEPARATOR ' ') from mysql_server m, hosts h WHERE m.id=h.id and h.cid=m.cid and h.ping_status>0 and connected=1 and m.cid=$CLUSTER_ID"
    mysql_hostnames=`$MYSQL_BIN -B -N --host=$CMON_DB_HOST --port=$CMON_DB_PORT --user=cmon --password=$CMON_PASSWORD --database=$CMON_DB_DB -e "$QUERY"`

    QUERY="select group_concat(h.hostname SEPARATOR ' ') from hosts h WHERE h.cid=$CLUSTER_ID AND h.ping_status>0"
    all_hostnames=`$MYSQL_BIN -B -N --host=$CMON_DB_HOST --port=$CMON_DB_PORT --user=cmon --password=$CMON_PASSWORD --database=$CMON_DB_DB -e "$QUERY"`

    QUERY="select count(id) from hosts h WHERE h.cid=$CLUSTER_ID AND h.ping_status>0"
    c_cnt=`$MYSQL_BIN -B -N --host=$CMON_DB_HOST --port=$CMON_DB_PORT --user=cmon --password=$CMON_PASSWORD --database=$CMON_DB_DB -e "$QUERY"`
    QUERY="select count(id) from hosts h WHERE h.cid=$CLUSTER_ID"
    a_cnt=`$MYSQL_BIN -B -N --host=$CMON_DB_HOST --port=$CMON_DB_PORT --user=cmon --password=$CMON_PASSWORD --database=$CMON_DB_DB -e "$QUERY"`
    
    if [ $a_cnt -ne $c_cnt ]; then
	echo "Not all hosts are reachable. Aborting"
	exit 1
    fi
    

    if [ -z "$mysql_hostnames" ]; then
       echo "No hostnames found."
       exit 1
    fi

    if [ "$mysql_hostnames" = "NULL" ]; then
       echo "No hostnames found."
       exit 1
    fi


    if [ -z "$all_hostnames" ]; then
       echo "No hostnames found."
       exit 1
    fi

    if [ "$all_hostnames" = "NULL" ]; then
       echo "No hostnames found."
       exit 1
    fi
    
    mysql_hostnames="$mysql_hostname $mysql_hostnames"
    echo $mysql_hostnames

    for h in $mysql_hostnames
    do
	change_password_mysql $h cmon $NEW_PASSWORD
	
    done
    echo $all_hostnames
    for h in $all_hostnames
    do
	change_password_cmoncnf $h $NEW_PASSWORD	
    done
    for h in $all_hostnames
    do
	remote_cmd $h "/etc/init.d/cmon restart"
    done
    QUERY="UPDATE cmon_configuration SET value='$NEW_PASSWORD' WHERE param='CMON_PASSWORD' AND cid='$CLUSTER_ID'"
    
    `$MYSQL_BIN -N -B -A --user=$CMON_USER --password=$NEW_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT -e "$QUERY"`
    if [ $? -ne 0 ]; then
	echo "Failed to set CMON_PASSWORD in cmon_configuration table, you can go into Cluster Settings in the web interface and set it"
	exit 1
    fi
    echo "Successfully changed 'cmon' password"
    exit 0
    
}



function change_root_password
{
    LB_NODE_LIST=""
    args=`getopt p:s:P:h:i:N:n:j: $*`
    set -- $args
    for i
    do
        case "$i" in
            -p)
                CMON_PASSWORD="$2"; shift;
                shift;;
            -i)
                CLUSTER_ID="$2"; shift;
                shift;;
            -n)
                NEW_PASSWORD="$2"; shift;
                shift;;
            -j)
                JOBID="$2"; shift;
                shift;;
            --)
                shift; break;;
                esac
    done

    
    if [ -z "$CMON_PASSWORD" ]; then
        echo "s9s_change_passwd --root  -p <current cmon password> is missing"
      exit 1
    fi

    if [ -z "$CLUSTER_ID" ]; then
        echo "s9s_change_passwd --root  -i <cluster id> is missing"
	exit 1
    fi

    if [ -z "$NEW_PASSWORD" ]; then
        echo "s9s_change_passwd --root  -n <new_root_password> is missing"
        exit 1
    fi
    


    load_opts $CLUSTER_ID
    QUERY="select group_concat(h.hostname SEPARATOR ' ') from mysql_server m, hosts h WHERE m.id=h.id and h.cid=m.cid and h.ping_status>0 and connected=1 and m.cid=$CLUSTER_ID"
    mysql_hostnames=`$MYSQL_BIN -B -N --host=$CMON_DB_HOST --port=$CMON_DB_PORT --user=cmon --password=$CMON_PASSWORD --database=$CMON_DB_DB -e "$QUERY"`

    if [ -z "$mysql_hostnames" ]; then
       echo "No hostnames found."
       exit 1
    fi

    if [ "$mysql_hostnames" = "NULL" ]; then
       echo "No hostnames found."
       exit 1
    fi
    
    mysql_hostnames="$mysql_hostname $mysql_hostnames"
    echo $mysql_hostnames
    
    for h in $mysql_hostnames
    do
	change_password_mysql $h root $NEW_PASSWORD
	
    done
    for h in $mysql_hostnames
    do
	remote_cmd $h "/etc/init.d/cmon restart"
    done
    QUERY="UPDATE cmon_configuration SET value='$NEW_PASSWORD' WHERE param='ROOT_PASSWORD' AND cid='$CLUSTER_ID'"
    
    `$MYSQL_BIN -N -B -A --user=$CMON_USER --password=$CMON_PASSWORD --database=$CMON_DB_DB --host=$CMON_DB_HOST --port=$CMON_DB_PORT -e "$QUERY"`
    if [ $? -ne 0 ]; then
	echo "Failed to set ROOT_PASSWORD in cmon_configuration table, you can go into Cluster Settings in the web interface and set it"
	exit 1
    fi
    echo "Successfully changed root password"
    exit 0
    
}



if [ ! -e $LOCKFILE ]; then
    trap "rm -f $LOCKFILE; exit" INT TERM EXIT
    touch $LOCKFILE    
    case $1 in
	--cmon)
	    change_cmon_password  $2 $3 $4 $5 $6 $7 $8 $9
	    ;;
	--root)
	    change_root_password  $2 $3 $4 $5 $6 $7 $8 $9
	    ;;
	*)
	    echo "Usage: "
	    echo "s9s_change_password  --[cmon|root] "
	    exit 1
	    ;;
    esac
    rm $LOCKFILE
    trap - INT TERM EXIT
fi

