#!/usr/bin/env bash
# All files in this package is subject to the GPL v2 license
# More information is in the COPYING file in the top directory of this package.
# Copyright (C) 2012 Severalnines AB


DEBUG=1
TEMP=`getopt -o h,l,f,t:,b:,d:,r:,n --long help,latest,force,topdir:,backup:,backupdir:,restore:,skip-backup-db  -n 's9s_upgrade_cmon' -- "$@"`
eval set -- "$TEMP"


while true ; do
	case "$1" in
		-h|--help) help="1" ; shift ;;
		-l|--latest) latest="1" ; shift ;;
		-f|--force) force="1" ; shift ;;
		-t|--topdir) top_dir="$2" ; shift 2 ;;
		-b|--backup) backup="$2" ; shift 2 ;;
		-n|--skip-backup-db) skip_backup_db="1" ; shift ;;
		-d|--backupdir) backup_dir="$2" ; shift 2 ;;
		-r|--restore) restore="$2" ; shift 2 ;;
		--) shift ; break ;;
		*) echo "$0: error - unrecognized option -$OPTARG" 1>&2; exit 1;;
	esac
done

helpMenu()
{
        echo "ClusterControl Auto Updater"
        echo "Usage: `basename $0` [options]"
        echo ""
        echo "Options:"
        echo "-l, --latest              : Upgrade ClusterControl to latest version (recommended)"
	echo "-f, --force               : Force upgrade"
        echo "-t, --topdir              : Non-default path for CMON installation"
        echo "-b, --backup              : Perform ClusterControl backup (all|controller|agent)"
        echo "-n, --skip-backup-db      : Skip backing up cmon db and dcps db (saves disk space, not recommended)"
        echo '-d, --backupdir           : Custom path for ClusterControl backup directory (default: /tmp/s9s_backup_{time})'
        echo "-r, --restore             : Restore from ClusterControl backup (all|controller|agent)"
        echo "-h, --help                : Print help"
        echo ""
	echo "For more information, kindly go to http://support.severalnines.com/entries/24053181-Upgrade-ClusterControl-to-Latest-Version"
	echo ""
}
[ ! -z "$help" ] && helpMenu && exit 1
[ `whoami` != "root" ] && echo "Please run this script as root or using sudo" && exit 1

if [ ! -z "$backup" ] && [ "$backup" != "all" ] && [ "$backup" != "controller" ]  && [ "$backup" != "agent" ]; then
	echo "Unknown argument. Kindly specify supported argument for -b,--backup: (all|controller|agent)"
	exit 1
fi

if [ ! -z "$restore" ] && [ "$restore" != "all" ] && [ "$restore" != "controller" ] && [ "$restore" != "agent" ]; then
	echo "Unknown argument. Kindly specify supported argument for -r,--restore: (all|controller|agent)"
	exit 1
fi

if [ ! -z "$backup" ] && [ ! -z "$restore" ]; then
	echo "Option backup and restore cannot be used simultaneously."
	exit 1
elif [ ! -z "$backup_dir" ] && [ -z "$backup" ] && [ -z "$restore" ] && [ -z "$latest" ]; then
	echo "Option backupdir need to be used with option latest/backup/restore."
        exit 1
elif [ ! -z "$top_dir" ] && [ -z "$backup" ] && [ -z "$restore" ] && [ -z "$latest" ]; then
	echo "Option topdir need to be used with option latest/backup/restore."
        exit 1
elif [ ! -z "$restore" ] && [ ! -z "$latest" ]; then
	echo "Option restore cannot be used with option latest."
        exit 1
elif [ ! -z "$force" ] && [ -z "$latest" ]; then
	echo "Option force need to be used with option latest."
        exit 1
fi

arch=`uname -m`
[ "$arch" == "i686" ] && echo "Architecture not supported. Kindly use OS with x86_64 architecture." && exit 1

FILES=`ls /etc/cmon.cnf 2>&1`
FILES2=`ls /etc/cmon.d/*.cnf 2>&1`
FILES="$FILES $FILES2"
configfile=""
for f in $FILES
do
    X=`grep -l cluster_id=${CLUSTER_ID} $f 2>&1 `
    if [ $? -eq 0 ]; then
        source $f
        configfile=$f
    fi
done

if [ -z "$configfile" ]; then
    echo "No matching configuration file found having cluster_id=${CLUSTER_ID}"
    exit 1
fi

CMON_CONFIG=$configfile

if [ ! -e $CMON_CONFIG ] ; then
    echo "Could not find $CMON_CONFIG"
    exit 1
else
    cat $CMON_CONFIG | grep -v ^# | grep -v ^$ | grep -q -E '[ \t]' 2> /dev/null
    
    if [ $? -eq 0 ]; then
        i=0
	while read line; do
            if [[ $line =~ ^[^#]*= ]]; then
                name[i]=`echo $line | cut -d'=' -f 1`
	        value[i]=`echo $line | cut -d'=' -f 2- | tr ' ' ','`
        	sed -i.bak "s|^${name[$i]}=.*|${name[$i]}=${value[$i]}|g" $CMON_CONFIG
	        ((i++))
            fi
	done < $CMON_CONFIG
        source $CMON_CONFIG
    else
	source $CMON_CONFIG
    fi
fi

CMON_DB_HOST=$mysql_hostname
CMON_DB_PORT=$mysql_port
CMON_USER=cmon
CMON_DB_DB=cmon
CMON_PASSWORD=$mysql_password
[ ! -z `which mysql` ] && MYSQL_BIN=`which mysql` || MYSQL_BIN=$mysql_basedir/bin/mysql
[ ! -z `which mysqldump` ] && MYSQLDUMP_BIN=`which mysqldump` || MYSQLDUMP_BIN=$mysql_basedir/bin/mysqldump
CONNECT_TIMEOUT=10
CLUSTER_TYPE=$type
MYSQL_OPTS="--connect-timeout=$CONNECT_TIMEOUT"
LOCKFILE="/tmp/s9s_haproxy.lock"
OSUSER=$os_user
MYSQL_ETC=/etc
DOWNLOAD_URL='http://www.severalnines.com/downloads/cmon'

rel_dir=`dirname "$0"`
root_dir=`cd $rel_dir;pwd`
repo_dir_name=s9s_repo
repo_dir=$root_dir/$repo_dir_name
now=`date +%Y-%m-%d-%H_%M_%S`
tmp_dir=/tmp/s9s_backup_${now}
[ ! -z "$backup_dir" ] && tmp_dir=$backup_dir

install_config_path=/etc

[ ! -d $repo_dir ] && mkdir $repo_dir
[ ! -z "$osuser" ] && os_user=$osuser
if [ -z "$wwwroot" ]; then
	[ "$os" == "debian" ] && wwwroot=/var/www
	[ "$os" == "redhat" ] && wwwroot=/var/www/html
fi

[ "$mode" == "agent" ] && source $repo_dir/agent.config

## Function 
adviseRestore()
{
	echo -n "Upgrade failed. "
	if [ -e $tmp_dir/upgrade_details.txt ]; then
		source $tmp_dir/upgrade_details.txt
		if [ "$BACKUP_STATUS" == "COMPLETED" ]; then
			echo -n "Found a working backup at $tmp_dir" && echo ""
		else
			echo -n "Unfortunately, the detected backup is incomplete. Kindly proceed with manual restoration." && echo "" && exit 1
		fi
	else
		echo -n "Working backup not found. Kindly proceed with manual restoration." && echo "" && exit 1
	fi	
	read -p "Do you want to restore to the original version? [Y/n]: " answer
	if [ "$answer" == "N" ] || [ "$answer" == "n" ]; then
		echo "Restoration aborted."
		exit 1
	else
                restoreCmon $tmp_dir
	fi
}

commandStatus()
{
	com="$2"
	label=$1
	printf "%-70s" "$label"
	$com 2>&1 >> s9s_upgrade_log
	[ $? -ne 0 ] && printf "[\e[00;31m %s\e[00m ]\n" "$label" ERROR && adviseRestore && exit 1
	printf "[\e[00;32m %s\e[00m ]\n" OK
}

spinner()
{
    local pid=$1
    local delay=0.5
    local spinstr='|/-\\'
    while [ "$(ps a | awk '{print $1}' | grep $pid)" ]; do
	local temp=${spinstr#?}
        printf " [%c]  " "$spinstr"
        local spinstr=$temp${spinstr%"$temp"}
        sleep $delay
        printf "\b\b\b\b\b\b"
    done
    printf "    \b\b\b\b"
}

setupSudo()
{
	echo "====================================================================="
	echo "Sudoers detected! We need the sudo password in order to automate this"
	echo "process. The password will be cleared once the process is completed."
	echo "Note: Just press enter if you are using sudo without password."
	echo "====================================================================="
	echo ""
	echo "Enter your sudo password: "
	read -s pswd
	if [ -z "$pswd" ]; then
		sudo=sudo
	else
		sudo="echo $pswd | sudo -S "
	fi
}

checkMysqlBin()
{
	if [ -z "$MYSQL_BIN" ] || [ -z "$MYSQLDUMP_BIN" ] ; then
		echo "MySQL client not found. Kindly add the MySQL client into PATH or install MySQL client package"
		echo "or change and specify the full path to the mysql client (in the beginning of this file): "
		echo "mysqlbin=\`which mysql\`"
		echo "to:"
		echo "mysqlbin=/path/to/mysql"
	        exit 1
	fi

	[ -z "$CMON_CONFIG" ] && echo "CMON_CONFIG was not set - aborting" && exit 1
	[ -z "$CMON_DB_HOST" ] && echo "CMON_DB_HOST was not set - aborting" && exit 1
	[ -z "$CMON_DB_PORT" ] && echo "CMON_DB_PORT was not set - aborting" && exit 1
	[ -z "$CMON_USER" ] && echo "CMON_USER was not set - aborting" && exit 1
	[ -z "$CMON_DB_DB" ] && echo "CMON_DB_DB was not set - aborting" && exit 1
	[ -z "$CMON_PASSWORD" ] && echo "CMON_PASSWORD was not set - aborting" && exit 1
	[ -z "$CMON_PASSWORD" ] && echo "CMON_PASSWORD was not set - aborting" && exit 1

	return 0
}

checkRequirement(){
	check_option=$1

	if [ "$check_option" == "curl" ]; then
		CURL_BIN=`which curl`
		if [ -z "$CURL_BIN" ]; then
			echo "** Installing required packages .."
			[ "$os" == "debian" ] && $HTTP_PROXY apt-get update -qq && $HTTP_PROXY apt-get install -y -qq curl
			[ "$os" == "redhat" ] && $HTTP_PROXY yum install -y --quiet curl
		fi
	elif [ "$check_option" == "bc" ]; then
		BC_BIN=`which bc`
		if [ -z "$BC_BIN" ]; then
                	echo "** Installing required packages .."
	                [ "$os" == "debian" ] && $HTTP_PROXY apt-get update -qq && $HTTP_PROXY apt-get install -y --quiet bc
        	        [ "$os" == "redhat" ] && $HTTP_PROXY yum install -y --quiet bc
	        fi
	fi
}

collectInfo()
{
        cluster_type=$type
	checkMysqlBin
	checkRequirement curl
	checkRequirement bc

	echo ""	
	echo "==================================="
	echo "      Collecting Information"
	echo "==================================="
	
	query_cmon_version="SELECT DISTINCT cmon_version FROM cmon.hosts WHERE cid=$cluster_id"
	query_cmon_install_method="SELECT value FROM cmon.cmon_configuration WHERE param='INSTALL_METHOD' AND cid=$cluster_id"
	query_cmon_tables="set group_concat_max_len=20480;select group_concat(table_name SEPARATOR ' ')  from information_schema.tables where table_schema='cmon' and (table_name not like '%history%' or table_name not like 'mysql_statistics_tm')"
	query_cmon_httpproxy="SELECT value FROM cmon.cmon_configuration WHERE param='HTTP_PROXY' AND cid=$cluster_id"
	version_url="$DOWNLOAD_URL/version.txt"
	CMON_VERSION_DB=`$MYSQL_BIN -ucmon -p$CMON_PASSWORD -h$CMON_DB_HOST -P$CMON_DB_PORT -A -Bse "$query_cmon_version"`
	INSTALL_METHOD=`$MYSQL_BIN -ucmon -p$CMON_PASSWORD -h$CMON_DB_HOST -P$CMON_DB_PORT -A -Bse "$query_cmon_install_method"`
	CMON_DB_TABLES=`$MYSQL_BIN -ucmon -p$CMON_PASSWORD -h$CMON_DB_HOST -P$CMON_DB_PORT -A -Bse "$query_cmon_tables"`
	HTTP_PROXY=`$MYSQL_BIN -ucmon -p$CMON_PASSWORD -h$CMON_DB_HOST -P$CMON_DB_PORT -A -Bse "$query_cmon_httpproxy"`
	if [ "$cluster_type" == "mongodb" ]; then
		LATEST_CMON_VERSION=`$CURL_BIN -s $version_url | grep CMON_MONGODB_LATEST_VERSION | sed "s/^CMON_MONGODB_LATEST_VERSION=//g"`
	else
		LATEST_CMON_VERSION=`$CURL_BIN -s $version_url | grep CMON_LATEST_VERSION | sed "s/^CMON_LATEST_VERSION=//g"`
	fi
	
	[ -z $LATEST_CMON_VERSION ] && echo "** Unable to retrieve latest version. Please check your internet connection." && exit 1

        i=0
        for p in ${CMON_VERSION_DB};do
                (( i++ ))
        done

        if [ $i != 1 ]; then
                echo -n "** Unable to proceed due to multiple versions of CMON detected:"
                for q in ${CMON_VERSION_DB}; do
                        echo -n " $q"
                done
                echo ""
		echo ""
                echo "** Kindly perform manual upgrade on the node that running older version of CMON as described in this KB:"
                echo "   http://support.severalnines.com/entries/21095371-CMON-1-2-3-released-upgrade-instructions"
#                exit 1
        else
                CMON_VERSION=$CMON_VERSION_DB
        fi

	echo "** Current CMON version: $CMON_VERSION"
	trim_cmon_version=`echo $CMON_VERSION | sed "s/\.//g"`
	echo "** Latest CMON version: $LATEST_CMON_VERSION"
	trim_latest_cmon_version=`echo $LATEST_CMON_VERSION | sed "s/\.//g"`

        CMON_VERSION=${CMON_VERSION//[a-z]/}
        LATEST_CMON_VERSION=${LATEST_CMON_VERSION//[a-z]/}

	vers=$CMON_VERSION
	latest_vers=$LATEST_CMON_VERSION

        #sum up: 1.1.24 = 1000+100+24 if 1.2.2 = 1000+200+2
        a1=`echo $vers | awk -F. -v OFS=. '{print $1}'`
        b1=`echo $vers | awk -F. -v OFS=. '{print $2}'`
        c1=`echo $vers | awk -F. -v OFS=. '{print $3}'`
        v1=`echo $[a1*1000+b1*100+c1]`

        la1=`echo $latest_vers | awk -F. -v OFS=. '{print $1}'`
        lb1=`echo $latest_vers | awk -F. -v OFS=. '{print $2}'`
        lc1=`echo $latest_vers | awk -F. -v OFS=. '{print $3}'`
        lv1=`echo $[la1*1000+lb1*100+lc1]`

        if [ "$cluster_type" == "mongodb" ]; then
                cmon_package="cmon-$LATEST_CMON_VERSION-64bit-glibc23-mongodb.tar.gz"
                rpm_controller="cmon-mongodb-controller-$LATEST_CMON_VERSION-1.x86_64.rpm"
                rpm_www="cmon-mongodb-www-$LATEST_CMON_VERSION-1.noarch.rpm"
                rpm_agent="cmon-mongodb-agent-$LATEST_CMON_VERSION-1.x86_64.rpm"
        else
                cmon_package="cmon-$LATEST_CMON_VERSION-64bit-glibc23-mc70.tar.gz"
                rpm_controller="cmon-controller-$LATEST_CMON_VERSION-1.x86_64.rpm"
                rpm_www="cmon-www-$LATEST_CMON_VERSION-1.noarch.rpm"
                rpm_agent="cmon-agent-$LATEST_CMON_VERSION-1.x86_64.rpm"
        fi
        cc_package="s9s-clustercontrol-$LATEST_CMON_VERSION.tar.gz"

	AGENT_CONFIG=$repo_dir/../agent.config

	rm -f $AGENT_CONFIG
        echo "CMON_VERSION=$CMON_VERSION" >> $AGENT_CONFIG
        echo "LATEST_CMON_VERSION=$LATEST_CMON_VERSION" >> $AGENT_CONFIG
	echo "os=$os" >> $AGENT_CONFIG
	echo "type=$type" >> $AGENT_CONFIG
	[ "$os" == "debian" ] && echo "cmon_package=$cmon_package" >> $AGENT_CONFIG
	[ "$os" == "redhat" ] && echo "rpm_agent=$rpm_agent" >> $AGENT_CONFIG
	echo "install_dir_cmon=$install_dir_cmon" >> $AGENT_CONFIG
	echo "tmp_dir=$tmp_dir" >> $AGENT_CONFIG
	echo "INSTALL_METHOD=$INSTALL_METHOD" >> $AGENT_CONFIG	

	if [ $lv1 -gt $v1 ]; then
		return 0
	else
		return 1
	fi
}

stopCmon()
{
	cmon_pid=`pgrep cmon`
	if [ ! -z "$cmon_pid" ]; then
		commandStatus 'Stopping CMON service: ' "/etc/init.d/cmon stop"
	else
		echo "** CMON service is not running"
	fi
}

startCmon()
{
	[ ! -z "$1" ] && os=$1

	if [ "$mode" == "controller" ]; then		
		apache_svc=apache2
		cron_svc=cron
		[ "$os" == "redhat" ] && apache_svc=httpd && cron_svc=crond	
		commandStatus 'Stopping Apache web server: ' "service $apache_svc stop"
		sleep 1
		commandStatus 'Starting Apache web server: ' "service $apache_svc start"
		commandStatus 'Stopping cron service: ' "service $cron_svc stop"
		sleep 1
		commandStatus 'Starting cron service: ' "service $cron_svc start"
	fi
	commandStatus 'Starting CMON service: ' "/etc/init.d/cmon start"
}

getModDatabase()
{
	vers=$CMON_VERSION
	[ ! -z $1 ] && vers=$1
	latest_vers=$LATEST_CMON_VERSION
	[ ! -z $2 ] && latest_vers=$2
	cmon_sql_path=$install_dir_cmon/sql
	[ "$os" == "redhat" ] && cmon_sql_path=/usr/share/cmon

	[ ! -d $cmon_sql_path ] && echo "Error: Could not found the cmon_sql_path." && exit 1

	#sum up: 1.1.24 = 1000+100+24 if 1.2.2 = 1000+200+2
	#echo "$version - $latest_version"
	a1=`echo $vers | awk -F. -v OFS=. '{print $1}'`
	b1=`echo $vers | awk -F. -v OFS=. '{print $2}'`
	c1=`echo $vers | awk -F. -v OFS=. '{print $3}'`
	v1=`echo $[a1*1000+b1*100+c1]`

	la1=`echo $latest_vers | awk -F. -v OFS=. '{print $1}'`
	lb1=`echo $latest_vers | awk -F. -v OFS=. '{print $2}'`
	lc1=`echo $latest_vers | awk -F. -v OFS=. '{print $3}'`
	lv1=`echo $[la1*1000+lb1*100+lc1]`

	# compare version
	i=1;j=1
	if [ "$type" == "mongodb" ]; then
		list_com=`ls -1 $cmon_sql_path | grep cmon_db_mods | sed "s|cmon_db_mods-||g;s|.sql$||g;s|-.*||g"`
	else
		list_com=`ls -1 $cmon_sql_path | grep cmon_db_mods | grep -v mongodb | sed "s|cmon_db_mods-||g;s|.sql$||g;s|-.*||g"`
	fi
	for file in $list_com
	do
        	for h in $file
        	do
                	a=`echo $h | awk -F. -v OFS=. '{print $1}'`
	                b=`echo $h | awk -F. -v OFS=. '{print $2}'`
        	        c=`echo $h | awk -F. -v OFS=. '{print $3}'`
	                v=`echo $[a*1000+b*100+c]`

        	        array[$i]=$v
                	(( i++ ))
        	done
	done

	# sort and get the filename
	for val in `printf '%s\0' "${array[@]}" | sort -z | xargs -0n1`
	do
        	f1=`echo "scale=0;$val/1000" | bc`
		f2=`echo "scale=0;($val-1000)/100" | bc`
        	f3=`echo "scale=1;(($val-1000)-100)" | bc`
	        [ $f3 -ge 100 ] && f3=`echo $[f3-100]`
        	mod_ver="$f1.$f2.$f3"
	        if [ $v1 -le $val ] && [ $lv1 -gt $val ]; then
			if [ "$type" == "mongodb" ]; then
				file_array[$j]=`ls -1 $cmon_sql_path | grep $mod_ver- | grep mongodb`
			else
				file_array[$j]=`ls -1 $cmon_sql_path | grep $mod_ver- | grep -v mongodb`
			fi
	                (( j++ ))
        	fi
	done
#	echo "ifile: ${file_array[@]}"
}

upgradeCmonDatabase()
{
	echo ""
        echo "==================================="
        echo "        Upgrade CMON Schema"
        echo "==================================="

	checkMysqlBin
	getModDatabase
	cmon_sql_path=$install_dir_cmon/sql
	[ "$os" == "redhat" ] && cmon_sql_path=/usr/share/cmon

	[ ! -d $cmon_sql_path ] && echo "Error: Could not found the cmon_sql_path." && exit 1
	[ ! -e $cmon_sql_path/cmon_db.sql ] && echo "Error: Could not found $cmon_sql_path/cmon_db.sql" && exit 1
        [ ! -e $cmon_sql_path/cmon_data.sql ] && echo "Error: Could not found $cmon_sql_path/cmon_data.sql" && exit 1

	($MYSQL_BIN -f -u$CMON_USER -p$CMON_PASSWORD -h$CMON_DB_HOST -P$CMON_DB_PORT $CMON_DB_DB < $cmon_sql_path/cmon_db.sql) &
        printf "%-70s" "Upgrading CMON schema structure" && spinner $! && printf "[\e[00;32m %s\e[00m ]\n" OK

	if [[ ! -z "${file_array[@]}" ]]; then
		for mod_file in "${file_array[@]}"
		do
			if [ -f "$cmon_sql_path/$mod_file" ]; then
				($MYSQL_BIN -f -u$CMON_USER -p$CMON_PASSWORD -h$CMON_DB_HOST -P$CMON_DB_PORT $CMON_DB_DB < $cmon_sql_path/$mod_file 2>/dev/null) &
				printf "%-70s" "Applying CMON mod database $mod_file" && spinner $! && printf "[\e[00;32m %s\e[00m ]\n" OK
			else
				echo "Error: Could not found $cmon_sql_path/$mod_file." && exit 1
			fi
		done
	else
		echo "** No need to apply cmon_db_mods"
	fi
	
	($MYSQL_BIN -f -u$CMON_USER -p$CMON_PASSWORD -h$CMON_DB_HOST -P$CMON_DB_PORT $CMON_DB_DB < $cmon_sql_path/cmon_data.sql) &
	printf "%-70s" "Upgrading CMON schema data" && spinner $! && printf "[\e[00;32m %s\e[00m ]\n" OK

}

installCcUi()
{
        version=$LATEST_CMON_VERSION
        [ ! -z $1 ] && version="$1"

	echo ""
        echo "==================================="
        echo "     Install ClusterControl UI"
        echo "==================================="

	rm -f $wwwroot/cmonapi
	rm -f $wwwroot/clustercontrol
	rm -Rf $wwwroot/install
	commandStatus "Clearing up $wwwroot" "rm -Rf $wwwroot/cc-*"
	commandStatus 'Extracting ClusterControl UI' "tar zxf $repo_dir/$cc_package -C $wwwroot"
        commandStatus 'Installing CMONAPI' "ln -sf $wwwroot/cc-cmonapi-${version} $wwwroot/cmonapi"
        commandStatus 'Installing ClusterControl UI' "ln -sf $wwwroot/cc-ui-${version} $wwwroot/clustercontrol"
	
	apache_conf=/etc/apache2/sites-available/default
	apache_conf_ssl=/etc/apache2/sites-available/default-ssl
	www_user=www-data
	install_packages="$HTTP_PROXY apt-get install -y --quiet php5-curl"
	enable_mods="ssl rewrite"
	cert_file="/etc/ssl/certs/s9server.crt"
	key_file="/etc/ssl/private/s9server.key"
	stop_apache="service apache2 stop"
	start_apache="service apache2 start"

	if [ "$os" == "redhat" ]; then
		apache_conf=/etc/httpd/conf/httpd.conf
		apache_conf_ssl=/etc/httpd/conf.d/ssl.conf
		www_user=apache
		install_packages="$HTTP_PROXY yum install -y --quiet mod_ssl php-curl"
		enable_mods=""
		cert_file="/etc/pki/tls/certs/s9server.crt"
		key_file="/etc/pki/tls/private/s9server.key"
		stop_apache="service httpd stop"
		start_apache="service httpd start"
	fi

	commandStatus 'Applying permission' "chmod -R 777 $wwwroot/clustercontrol/app/tmp $wwwroot/clustercontrol/app/upload"
	commandStatus 'Applying ownership' "chown -R $www_user.$www_user $wwwroot/cmonapi $wwwroot/clustercontrol $wwwroot/install"

	sed -ibak "s|AllowOverride None|AllowOverride All|g" $apache_conf
	commandStatus 'Installing required packages' "$install_packages"

	commandStatus 'Copying SSL cert file' "cp -f $wwwroot/cmonapi/ssl/server.crt ${cert_file}"
	commandStatus 'Copying SSL key file' "cp -f $wwwroot/cmonapi/ssl/server.key ${key_file}"
	rm -rf $wwwroot/cmonapi/ssl

	sed -ibak "s|AllowOverride None|AllowOverride All|g" $apache_conf_ssl

	if [ "$os" == "redhat" ]; then
		sed -ibak "s|^SSLCertificateFile.*|SSLCertificateFile ${cert_file}|g" $apache_conf_ssl
		sed -ibak "s|^SSLCertificateKeyFile.*|SSLCertificateKeyFile ${key_file}|g" $apache_conf_ssl
	else
		sed -ibak "s|^[ \t]SSLCertificateFile.*|SSLCertificateFile ${cert_file}|g" $apache_conf_ssl
		sed -ibak "s|^[ \t]SSLCertificateKeyFile.*|SSLCertificateKeyFile ${key_file}|g" $apache_conf_ssl
	fi

	for m in $enable_mods
	do
		a2enmod $m
	done

	if [ "$os" != "redhat" ]; then
		ln -sf $apache_conf_ssl /etc/apache2/sites-enabled/001-${apache_conf_ssl##*/}
	fi

	install_index=$wwwroot/install/index.php
	# detect line n do some replacement
	line_number2=`cat -n $install_index | grep cc_db_pass | awk {'print $1'}`
	sed -i "${line_number2}s/value=\"cmon\"/value=\"$CMON_PASSWORD\"/g" $install_index

	commandStatus 'Stopping Apache' "$stop_apache"
	sleep 1
	commandStatus 'Starting Apache' "$start_apache"
	install_cc_ui=1
	echo "** ClusterControl UI installed!"

	[[ ${#ip[@]} > 1 ]] && echo "NOTE: Detected more than one IP: ${ip[@]}"
}

upgradeCcUi()
{
	version=$LATEST_CMON_VERSION
	[ ! -z $1 ] && version="$1"

	echo ""
        echo "==================================="
        echo "     Upgrade ClusterControl UI"
        echo "==================================="

	commandStatus 'Extracting ClusterControl UI' "tar zxf $repo_dir/$cc_package -C $repo_dir"
	commandStatus 'Backing up ClusterControl bootstrap.php' "cp -rf $wwwroot/clustercontrol/bootstrap.php $repo_dir/cc-ui-${version}/"
	commandStatus 'Backing up CMONAPI bootstrap.php' "cp -rf $wwwroot/cmonapi/config/bootstrap.php $repo_dir/cc-cmonapi-${version}/config/"
	commandStatus 'Backing up CMONAPI database.php' "cp -rf $wwwroot/cmonapi/config/database.php $repo_dir/cc-cmonapi-${version}/config/"
	sed -i "s|^define('CC_API_VERSION'.*|define('CC_API_VERSION', '${version}');|g" $repo_dir/cc-cmonapi-${version}/config/bootstrap.php
	sed -i "s|^define('CC_API_VERSION'.*|define('CC_API_VERSION', '${version}');|g" $repo_dir/cc-ui-${version}/bootstrap.php
	commandStatus "Copying CMONAPI to $wwwroot" "cp -rf $repo_dir/cc-cmonapi-${version} $wwwroot/"
	commandStatus "Copying ClusterControl UI to $wwwroot" "cp -rf $repo_dir/cc-ui-${version} $wwwroot/"
	rm -f $wwwroot/clustercontrol
	rm -f $wwwroot/cmonapi
	commandStatus 'Upgrading CMONAPI' "ln -sf $wwwroot/cc-cmonapi-${version} $wwwroot/cmonapi"
	commandStatus 'Upgrading ClusterControl UI' "ln -sf $wwwroot/cc-ui-${version} $wwwroot/clustercontrol"
	($MYSQL_BIN -f -u$CMON_USER -p$CMON_PASSWORD -h$CMON_DB_HOST -P$CMON_DB_PORT $CMON_DB_DB < $repo_dir/cc-ui-${version}/sql/dc-schema.sql) &
	printf "%-70s" "Upgrading ClusterControl schema" && spinner $! && printf "[\e[00;32m %s\e[00m ]\n" OK
	
	apache_user=www-data
	[ "$os" == "redhat" ] && apache_user=apache
	commandStatus 'Applying permission' "chown -R $apache_user:$apache_user $wwwroot"
	rm -f $repo_dir/clustercontrol
	rm -f $repo_dir/cmonapi
	commandStatus 'Cleaning up ClusterControl packages' "rm -rf $repo_dir/cc-*"
	commandStatus 'Cleaning up ClusterControl install package' "rm -rf $repo_dir/install"

	echo "** Upgrade ClusterControl UI has been completed!"
}

upgradeCmon()
{
	echo ""
        echo "==================================="
        echo "          Upgrade CMON"
        echo "==================================="
	
	stopCmon

	rm -Rf /usr/sbin/cmon
        rm -Rf /usr/bin/cmon*
        rm -Rf /usr/bin/s9s*
        rm -Rf /usr/local/cmon*
        rm -Rf /etc/init.d/cmon
        rm -Rf /etc/cron.d/cmon
        rm -Rf $wwwroot/cmon

        if [ "$os" == "debian" ]; then
		install_dir=`echo $install_dir_cmon | sed "s|cmon||g"`
		[ -f $install_dir_cmon/sbin/cmon ] && rm -Rf $install_dir_cmon
                [ ! -d $install_dir ] && commandStatus 'Creating CMON installation directory' "mkdir -p $install_dir"
		(zcat $repo_dir/$cmon_package | tar xf - -C $install_dir) &
		printf "%-70s" "Extracting $cmon_package" && spinner $! && printf "[\e[00;32m %s\e[00m ]\n" OK
		cmon_name=`ls -1 $install_dir | grep cmon- | tail -1`
                ln -s $install_dir/$cmon_name $install_dir_cmon
                commandStatus "Upgrading CMON binary" "cp -rf $install_dir_cmon/bin/cmon* /usr/bin/"
		commandStatus "Upgrading S9S binary" "cp -rf $install_dir_cmon/bin/s9s* /usr/bin/"
		commandStatus "Upgrading CMON sbin binary" "cp -rf $install_dir_cmon/sbin/* /usr/sbin/"
                commandStatus "Upgrading CMON init.d script" "cp $install_dir_cmon/etc/init.d/cmon /etc/init.d/"
		[ "$install_dir_cmon" != "/usr/local/cmon" ] && sed -i "s|^SBINDIR=.*|SBINDIR=$install_dir_cmon/sbin|g" /etc/init.d/cmon
                commandStatus "Applying user permission (init.d)" "chmod u+x /etc/init.d/cmon"
                if [ "$mode" == "controller" ]; then
                        commandStatus "Upgrading CMON cron file" "cp $install_dir_cmon/etc/cron.d/cmon /etc/cron.d/cmon"
                        commandStatus 'Upgrading CMON web app' "cp -rf $install_dir_cmon/www/*  $wwwroot/"
                        commandStatus "Applying user permission (web)" "chown -R www-data:www-data $wwwroot/cmon"
                fi
        else
		check_installed=`rpm -qa | grep -e cmon-$mode`
		[ $check_installed ] && rpm -e cmon-$mode
                if [ "$mode" == "controller" ]; then
			check_installed_www=`rpm -qa | grep -e cmon-www`
	                [ $check_installed_www ] && rpm -e cmon-www
                        commandStatus 'Upgrading CMON controller' "rpm -Uh $repo_dir/$rpm_controller"
                        commandStatus 'Upgrading CMON web app' "rpm -Uh $repo_dir/$rpm_www"
                        commandStatus "Applying user permission (web)" "chown -R apache:apache $wwwroot/cmon"
                else
                        commandStatus 'Upgrading CMON agent' "rpm -Uh $repo_dir/$rpm_agent"
                fi
        fi

        if [ "$mode" == "controller" ]; then
	        upgrade_details=$tmp_dir/upgrade_details.txt
	        [ ! -e $upgrade_details ] && echo "** Backup status not found at $upgrade_details" exit 1
        	source $upgrade_details

                mkdir -p $wwwroot/cmon/graphs
                commandStatus "Creating CMON upload directory" "mkdir -p $wwwroot/cmon/upload"
                mkdir -p $wwwroot/cmon/upload/schema
                commandStatus "Copying new packages to upload directory" "cp $repo_dir/* $wwwroot/cmon/upload/"
		commandStatus "Restoring older packages to upload directory" "cp -rf $tmp_dir/wwwroot/cmon/upload/* $wwwroot/cmon/upload/"

		cmon_agent_file=$repo_dir/$rpm_agent &&	fname=$rpm_agent
		[ "$os" == "debian" ] && cmon_agent_file=$repo_dir/$cmon_package && fname=$cmon_package

		sum_agent=`md5sum $cmon_agent_file | awk '{print $1;}'`
		filesize=`stat --printf='%s' $cmon_agent_file`

		CID=1
		QUERY="BEGIN; DELETE FROM cmon_uploads WHERE cid=$CID AND packageid=(SELECT packageid FROM cmon.cmon_sw_package WHERE name='CMON_DEFAULT' AND cid=$CID);\
                INSERT IGNORE INTO cmon.cmon_uploads (cid, packageid, filename,path,cluster_type,version_tag,md5sum,filesize,selected) VALUES (1,1,'$fname','$wwwroot/cmon/upload/','$type','','$sum_agent', $filesize ,1); COMMIT"
		$MYSQL_BIN -u$CMON_USER -p$CMON_PASSWORD -h$CMON_DB_HOST -P$CMON_DB_PORT $CMON_DB_DB -e "$QUERY"
	        if [ $? -ne 0 ]; then
			echo "FAILED: $QUERY"
			echo "Copying package failed."
			exit 1
        	fi

                commandStatus 'Restoring CMON RRD config file' "cp -f $tmp_dir/cmon_rrd.cnf /etc/"
		sed -i "s|^\$DB_PASSWORD1=.*|\$DB_PASSWORD1=\"$CMON_PASSWORD\"\;|g" $wwwroot/cmon/config/config_db1.php
		commandStatus 'Restoring CMON MySQL password' ""
		sed -i "s|^\$DB_PORT1=.*|\$DB_PORT1=\"$CMON_DB_PORT\"\;|g" $wwwroot/cmon/config/config_db1.php
                commandStatus 'Restoring CMON MySQL port' ""

                upgradeCmonDatabase
                if [ "$NEW_UI" == "NO" ]; then
			installCcUi $LATEST_CMON_VERSION
		else
			upgradeCcUi $LATEST_CMON_VERSION
		fi
        fi
	commandStatus 'Restoring CMON config file' "cp -f $tmp_dir/cmon.cnf /etc/"
	startCmon
	echo "** ClusterControl $mode upgrade for this host has been completed!"
}

downloadLatest(){

	cluster_type=$type
        package_type=$1

	echo ""
        echo "==================================="
        echo " Download ClusterControl Packages"
        echo "==================================="
	
	wget=`which wget`
	[ -z $wget ] && echo "** Unable to find wget!" && exit 1

	[ ! -d $repo_dir ] && commandStatus 'Create the repo directory' "mkdir -p $repo_dir"

	commandStatus "Clearing files in $repo_dir/" "rm -rf $repo_dir/*"

	if [ "$os" == "debian" ]; then
		($wget -q -O $repo_dir/$cmon_package $DOWNLOAD_URL/$cmon_package) &
		printf "%-70s" "Downloading $cmon_package to $repo_dir " && spinner $! && printf "[\e[00;32m %s\e[00m ]\n" OK
	else
		($wget -q -O $repo_dir/$rpm_controller $DOWNLOAD_URL/$rpm_controller) &
		printf "%-70s" "Downloading $rpm_controller to $repo_dir " && spinner $! && printf "[\e[00;32m %s\e[00m ]\n" OK
		($wget -q -O $repo_dir/$rpm_www $DOWNLOAD_URL/$rpm_www) &
		printf "%-70s" "Downloading $rpm_www to $repo_dir " && spinner $! && printf "[\e[00;32m %s\e[00m ]\n" OK
		($wget -q -O $repo_dir/$rpm_agent $DOWNLOAD_URL/$rpm_agent) &
		printf "%-70s" "Downloading $rpm_agent to $repo_dir " && spinner $! && printf "[\e[00;32m %s\e[00m ]\n" OK
	fi

	wget --spider -q $DOWNLOAD_URL/$cc_package
	if [ $? -eq 0 ]; then
		($wget -q -O $repo_dir/$cc_package $DOWNLOAD_URL/$cc_package) &
		printf "%-70s" "Downloading $cc_package to $repo_dir " && spinner $! && printf "[\e[00;32m %s\e[00m ]\n" OK
	fi

	echo "** Download completed!"
}

restoreCmon()
{
	if [ -z "$1" ]; then
		[ -z $backup_dir ] && echo "** Please specify the backup path using -d or --backupdir option." && exit 1
	else
		backup_dir=$1
	fi
	upgrade_details=$backup_dir/upgrade_details.txt
        [ ! -e $upgrade_details ] && echo "** Backup status not found at $upgrade_details" && exit 1
        [ "$mode" == "controller" ] && checkMysqlBin

	echo ""
        echo "==================================="
        echo "       Restore CMON $mode"
        echo "==================================="

        source $upgrade_details
	[ "$OLD_CMON_VERSION" != "$LATEST_CMON_VERSION" ] && echo "** From version $LATEST_CMON_VERSION -> $OLD_CMON_VERSION"

        if [ "$BACKUP_STATUS" == "COMPLETED" ]; then
                stopCmon
                if [ "$mode" == "controller" ]; then
			$MYSQL_BIN -u$CMON_USER -p$CMON_PASSWORD -h$CMON_DB_HOST -P$CMON_DB_PORT -e "DROP DATABASE IF EXISTS $CMON_DB_DB"
			$MYSQL_BIN -u$CMON_USER -p$CMON_PASSWORD -h$CMON_DB_HOST -P$CMON_DB_PORT -e "CREATE DATABASE $CMON_DB_DB"
			($MYSQL_BIN -f -u$CMON_USER -p$CMON_PASSWORD -h$CMON_DB_HOST -P$CMON_DB_PORT $CMON_DB_DB < $backup_dir/cmon_dump.sql) &
			printf "%-70s" "Restoring CMON schema" && spinner $! && printf "[\e[00;32m %s\e[00m ]\n" OK
			if [ -e $backup_dir/dcps_dump.sql ]; then
				CC_DB_DB=dcps
				$MYSQL_BIN -u$CMON_USER -p$CMON_PASSWORD -h$CMON_DB_HOST -P$CMON_DB_PORT -e "DROP DATABASE IF EXISTS $CC_DB_DB"
				$MYSQL_BIN -u$CMON_USER -p$CMON_PASSWORD -h$CMON_DB_HOST -P$CMON_DB_PORT -e "CREATE DATABASE $CC_DB_DB"
				($MYSQL_BIN -f -u$CMON_USER -p$CMON_PASSWORD -h$CMON_DB_HOST -P$CMON_DB_PORT $CC_DB_DB < $backup_dir/dcps_dump.sql) &
	                        printf "%-70s" "Restoring ClusterControl UI schema" && spinner $! && printf "[\e[00;32m %s\e[00m ]\n" OK
			fi
                        commandStatus 'Restoring CMON cron' "cp -pfR $backup_dir/cmon_crond /etc/cron.d/cmon"
			rm -Rf $wwwroot/install
			rm -Rf $wwwroot/cc-*
			rm -Rf $wwwroot/cmonapi
			rm -Rf $wwwroot/clustercontrol
			rm -Rf $wwwroot/cmon
                        commandStatus 'Restoring CMON web app' "cp -pfR $backup_dir/wwwroot/* $wwwroot/"
			commandStatus 'Restoring CMON configuration files' "cp -pfR $backup_dir/cmon_rrd.cnf /etc"
	                if [ "$os" == "redhat" ]; then
				share_dir_cmon=/usr/share
				rm -Rf $share_dir_cmon/cmon*
		                commandStatus 'Restoring CMON share directory' "cp -pfR $backup_dir/local/* $share_dir_cmon/"
			fi
                fi

		if [ "$os" == "debian" ]; then
			share_dir_cmon=`echo $install_dir_cmon | sed "s|cmon||g"`
			rm -Rf $share_dir_cmon/cmon*
			commandStatus 'Restoring CMON install directory' "cp -pfR $backup_dir/local/* $share_dir_cmon/"
		fi
                commandStatus 'Restoring CMON configuration files' "cp -pfR $backup_dir/cmon.cnf /etc"
                commandStatus 'Restoring CMON log file' "cp -pfR $backup_dir/cmon.log $logfile"
                commandStatus 'Restoring CMON init.d' "cp -pfR $backup_dir/cmon_init /etc/init.d/cmon"

                [ "$os" == "debian" ] && MYSQL_ETC=/etc/mysql
                [ -f $backup_dir/my.cnf ] && commandStatus 'Restoring my.cnf'  "cp -pfR $backup_dir/my.cnf $MYSQL_ETC/my.cnf"

                commandStatus 'Restoring CMON and S9S binary' "cp -pfR $backup_dir/bin/* /usr/bin/"
		[ -f $backup_dir/sbin/cmon ] && commandStatus 'Restoring CMON sbin binary' "cp -pf $backup_dir/sbin/cmon /usr/sbin/"
                startCmon $OS

                echo "** Restoration to version $OLD_CMON_VERSION has been completed!"
        else
                echo "** ClusterControl backup is incomplete or not exists."
                exit 1
        fi
}

backupCmon()
{
	checkMysqlBin

	echo ""	
	echo "==================================="
	echo "        Backup CMON $mode"
	echo "==================================="
	
	[ -e $tmp_dir ] && rm -rf $tmp_dir
	
	commandStatus "Creating backup directory: $tmp_dir" "mkdir -p $tmp_dir"
	upgrade_details=$tmp_dir/upgrade_details.txt
	echo "OLD_CMON_VERSION=$CMON_VERSION" >> $upgrade_details
	echo "LATEST_CMON_VERSION=$LATEST_CMON_VERSION" >> $upgrade_details
	echo "OS=$os" >> $upgrade_details

	if [ "$mode" == "controller" ]; then
                if [ -z "$skip_backup_db" ]; then
			commandStatus 'Backup CMON schema' "$MYSQLDUMP_BIN -f  -u$CMON_USER -p$CMON_PASSWORD -h$CMON_DB_HOST -P$CMON_DB_PORT  $CMON_DB_DB $CMON_DB_TABLES -r $tmp_dir/cmon_dump.sql"
		else
			printf "%-70s" "Backup CMON schema"
                        printf "[\e[00;33m %s\e[00m ]\n" SKIP
		fi
	        commandStatus 'Backup CMON cron' "cp -pfR /etc/cron.d/cmon $tmp_dir/cmon_crond"
		mkdir -p $tmp_dir/wwwroot
	        commandStatus 'Backup CMON web app' "cp -pfR $wwwroot/cmon $tmp_dir/wwwroot"
		if [ -e $wwwroot/clustercontrol ]; then
			CC_DB_DB=dcps
			commandStatus 'Backup ClusterControl web app' "cp -pfR $wwwroot/cc-* $wwwroot/cmona* $wwwroot/clustercontrol $tmp_dir/wwwroot"
			if [ -z "$skip_backup_db" ]; then
				commandStatus 'Backup ClusterControl schema' "$MYSQLDUMP_BIN -u$CMON_USER -p$CMON_PASSWORD -h$CMON_DB_HOST -P$CMON_DB_PORT $CC_DB_DB -r $tmp_dir/dcps_dump.sql"
			else
				printf "%-70s" "Backup ClusterControl schema"
				printf "[\e[00;33m %s\e[00m ]\n" SKIP
			fi
			echo "NEW_UI=YES" >> $upgrade_details
		else
			echo "NEW_UI=NO" >> $upgrade_details
		fi
		mkdir -p $tmp_dir/local
        	[ "$os" == "redhat" ] && commandStatus 'Backup CMON share directory' "cp -pfR /usr/share/cmon $tmp_dir/local/"
	fi

	commandStatus 'Backup CMON configuration files' "cp -pfR /etc/cmon* $tmp_dir/"
	commandStatus 'Backup CMON log file' "cp -pfR $logfile $tmp_dir/"
	commandStatus 'Backup CMON init.d' "cp -pfR /etc/init.d/cmon $tmp_dir/cmon_init"

	[ "$os" == "debian" ] && MYSQL_ETC=/etc/mysql
	[ -f $MYSQL_ETC/my.cnf ] && commandStatus 'Backup my.cnf'  "cp -pfR $MYSQL_ETC/my.cnf $tmp_dir/"

	[ "$os" == "debian" ] && mkdir -p $tmp_dir/local &&  commandStatus 'Backup CMON install directory' "cp -pfR $install_dir_cmon* $tmp_dir/local/"
	mkdir -p $tmp_dir/bin
	[ -f /usr/bin/s9s_backup ] && commandStatus 'Backup S9S binary' "cp -pf /usr/bin/s9s_* $tmp_dir/bin/"
	[ -f /usr/bin/cmon_install_agent.sh ] && commandStatus 'Backup CMON binary' "cp -pf /usr/bin/cmon* $tmp_dir/bin/"
	[ -f /usr/sbin/cmon ] && mkdir -p $tmp_dir/sbin && commandStatus 'Backup CMON sbin binary' "cp -pf /usr/sbin/cmon $tmp_dir/sbin/"

	echo "BACKUP_STATUS=COMPLETED" >> $upgrade_details
	echo "** Backup completed at $tmp_dir"
}

sshOptions()
{
	[ -z "$ssh_port" ] && ssh_port=22
        SSH_OPTS="-t -q -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no -oNumberOfPasswordPrompts=0 -oConnectTimeout=10 -i $ssh_key -p $ssh_port"
        SCP_OPTS="-q -oUserKnownHostsFile=/dev/null -oStrictHostKeyChecking=no -oNumberOfPasswordPrompts=0 -oConnectTimeout=10 -i $ssh_key -P $ssh_port"
}

restoreAgent()
{
	collectInfo	
	options="--restore=controller --backupdir=$backup_dir"

	all_agent_hosts=`echo $mysql_server_addresses | tr ',' ' '`

        if [ "$type" == "mysqlcluster" ]; then
                all_agents="$mysql_server_addresses $mgmnode_addresses $datanode_addresses"
                all_agent_hosts=$(echo "${all_agents[@]}" | tr ',' ' ' | tr ' ' '\n' | sort -u | tr '\n' ' ')
        fi

        mv $AGENT_CONFIG $repo_dir/

	sshOptions

        for h in $all_agent_hosts
        do
                ssh $SSH_OPTS $os_user@$h "mkdir -p ~/cc/"
                ssh $SSH_OPTS $os_user@$h "mkdir -p ~/cc/$repo_dir_name"
                scp -r $SCP_OPTS $repo_dir/agent.config $os_user@$h:~/cc/$repo_dir_name/
                scp $SCP_OPTS `basename $0` $os_user@$h:~/cc/
		echo ""
		echo "Hostname/IP: $h"
                ssh $SSH_OPTS $os_user@$h "$sudo cc/`basename $0` $options"
                ssh $SSH_OPTS $os_user@$h "rm -rf ~/cc"
        done

}


upgradeAgent()
{
	options="--latest"
	[ ! -z $1 ] && options="$1"

	all_agent_hosts=`echo $mysql_server_addresses | tr ',' ' '`

	if [ "$type" == "mysqlcluster" ]; then
		all_agents="$mysql_server_addresses $mgmnode_addresses $datanode_addresses"
		all_agent_hosts=$(echo "${all_agents[@]}" | tr ',' ' ' | tr ' ' '\n' | sort -u | tr '\n' ' ')
	fi

	mv $AGENT_CONFIG $repo_dir/

	sshOptions

	for h in $all_agent_hosts
	do
		ssh $SSH_OPTS $os_user@$h "mkdir -p ~/cc/"
		ssh $SSH_OPTS $os_user@$h "mkdir -p ~/cc/$repo_dir_name"
		scp -r $SCP_OPTS $repo_dir/* $os_user@$h:~/cc/$repo_dir_name/
		scp $SCP_OPTS `basename $0` $os_user@$h:~/cc/
		echo ""
		echo "Hostname/IP: $h"
		ssh $SSH_OPTS $os_user@$h "$sudo cc/`basename $0` $options"
		ssh $SSH_OPTS $os_user@$h "rm -rf ~/cc"
	done

}

backupAgent()
{
	collectInfo
	options='--backup=controller'

	all_agent_hosts=`echo $mysql_server_addresses | tr ',' ' '`

        if [ "$type" == "mysqlcluster" ]; then
                all_agents="$mysql_server_addresses $mgmnode_addresses $datanode_addresses"
                all_agent_hosts=$(echo "${all_agents[@]}" | tr ',' ' ' | tr ' ' '\n' | sort -u | tr '\n' ' ')
        fi

	mv $AGENT_CONFIG $repo_dir/

	sshOptions

        for h in $all_agent_hosts
        do
                ssh $SSH_OPTS $os_user@$h "mkdir -p ~/cc/"
                ssh $SSH_OPTS $os_user@$h "mkdir -p ~/cc/$repo_dir_name"
                scp -r $SCP_OPTS $repo_dir/agent.config $os_user@$h:~/cc/$repo_dir_name/
                scp $SCP_OPTS `basename $0` $os_user@$h:~/cc/
		echo ""
		echo "Hostname/IP: $h"
                ssh $SSH_OPTS $os_user@$h "$sudo cc/`basename $0` $options"
                ssh $SSH_OPTS $os_user@$h "rm -rf ~/cc"
        done

}

checkSudo ()
{
	checkMysqlBin
	query_ssh_identity="SELECT value FROM cmon.cmon_configuration WHERE param='SSH_IDENTITY' AND cid=$cluster_id"
	SSH_IDENTITY=`$MYSQL_BIN -ucmon -p$CMON_PASSWORD -h$CMON_DB_HOST -P$CMON_DB_PORT -A -Bse "$query_ssh_identity"`

        ssh_key="/home/$os_user/.ssh/id_rsa"
        [ "$os_user" == "root" ] && ssh_key="/root/.ssh/id_rsa"
	[ ! -z "$SSH_IDENTITY" ] && ssh_key=$SSH_IDENTITY

        if [ "$mode" == "controller" ]; then
                sudo=sudo
                [ "$os_user" == "root" ] && sudo="" || setupSudo
        fi

}

performUpgrade()
{
	echo ""
	[ "$force" == 1 ] || echo "New version found."
	read -p "** Proceed with upgrading? (Y/n): " answer
	if [ "$answer" == "N" ] || [ "$answer" == "n" ]; then
		echo "Upgrade cancelled."
		exit 1
	else
		checkSudo
		backupCmon
		[ "$mode" == "controller" ] && downloadLatest
		upgradeCmon
		[ "$mode" == "controller" ] && upgradeAgent
		echo ""
		echo "========================================="
		echo " Upgrade Has Been Successfully Completed"
		echo "========================================="
		echo ""
		[ "$install_cc_ui" == 1 ] && echo -e "\nNew ClusterControl web app installed!!\nKindly go to http://${CMON_DB_HOST}/install to finalize the installation"
	fi
}

verify_options (){
	[ -z "$mysql_hostname" ] && echo "** Unable to load option 'mysql_hostname' in $CMON_CONFIG" && exit 1
	[ -z "$mysql_port" ] && echo "** Unable to load option 'mysql_port' in $CMON_CONFIG" && exit 1
	[ -z "$mysql_password" ] && echo "** Unable to load option 'mysql_password' in $CMON_CONFIG" && exit 1
	[ -z "$type" ] && echo "** Unable to load option 'type' in $CMON_CONFIG" && exit 1
	[ -z "$cluster_id" ] && echo "** Unable to load option 'cluster_id' in $CMON_CONFIG" && exit 1
	[ -z "$mode" ] && echo "** Unable to load option 'mode' in $CMON_CONFIG" && exit 1
	if [ "$mode" == "controller" ]; then
        	[ -z "$os" ] && echo "** Unable to load option 'os' in $CMON_CONFIG" && exit 1
	fi

}

verify_topdir()
{
	if [ "$mode" == "controller" ]; then
		install_dir_cmon=/usr/local/cmon
		[ ! -z "$top_dir" ] && install_dir_cmon=$top_dir
		[ "$os" == "redhat" ] && install_dir_cmon=/usr
	fi

	[ ! -f $install_dir_cmon/sbin/cmon ] && echo "Cannot find CMON binary at $install_dir_cmon/sbin/cmon. Make sure you specify correct CMON path. Use -t to specify custom CMON path." && exit 1
}
if [ "$latest" == 1 ]; then
	verify_topdir
	verify_options
	if [ "$mode" == "controller" ]; then
		collectInfo
	        if [ $? -eq 0 ]; then
			performUpgrade
		else
			echo "ClusterControl is already up-to-date."
			if [ "$force" == 1 ]; then
				performUpgrade
			else
				exit 1
			fi
		fi
	else
		backupCmon
		upgradeCmon
	fi

elif [ "$latest" != 1 ] && [ ! -z "$backup" ]; then
	verify_topdir
	verify_options
	if [ "$backup" == "controller" ]; then
	    backupCmon
	elif [ "$backup" == "agent" ]; then
	    checkSudo
	    backupAgent
	elif [ "$backup" == "all" ]; then
	    checkSudo
	    backupCmon
	    backupAgent
	else
		echo "Unknown backup option. Please specify either controller, agent or all."
		exit 1
	fi

elif [ "$latest" != 1 ] && [ ! -z "$restore" ]; then
	verify_topdir
	if [ "$restore" == "controller" ]; then
		restoreCmon
	elif [ "$restore" == "agent" ]; then
		checkSudo
		restoreAgent
	elif [ "$restore" == "all" ]; then
		checkSudo
		restoreCmon
	        restoreAgent
	else
		echo "Unknown restore option. Please specify either controller, agent or all."
	        exit 1
	fi
else
	helpMenu
	exit 1
fi

